<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Profile - HandyHub</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0077be;
            --secondary-blue: #00a2e8;
            --dark-blue: #003366;
            --light-blue: #e6f2ff;
            --sidebar-width: 250px;
        }

        body {
            min-height: 100vh;
            background-color: #f8f9fa;
        }

        /* Sidebar Styling */
        .sidebar {
            width: var(--sidebar-width);
            background-color: var(--dark-blue);
            min-height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding-top: 20px;
        }

        .sidebar-brand {
            color: white;
            font-size: 1.5rem;
            padding: 20px;
            text-decoration: none;
            display: block;
            margin-bottom: 20px;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 12px 20px;
            margin: 4px 0;
            transition: all 0.3s ease;
        }

        .nav-link:hover, .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .nav-link i {
            margin-right: 10px;
        }

        /* Main Content Styling */
        .main-content {
            margin-left: var(--sidebar-width);
            padding: 20px 30px;
        }

        .edit-profile-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.5rem;
            color: var(--dark-blue);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .form-label {
            font-weight: 600;
            color: var(--dark-blue);
        }

        .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(0, 119, 190, 0.25);
        }

        .btn-save {
            background-color: var(--primary-blue);
            color: white;
            padding: 10px 25px;
            border-radius: 8px;
            border: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .btn-save:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
        }

        .btn-cancel {
            background-color: #f8f9fa;
            color: #333;
            padding: 10px 25px;
            border-radius: 8px;
            border: 1px solid #ddd;
            transition: all 0.3s ease;
            font-weight: 500;
            margin-right: 10px;
        }

        .btn-cancel:hover {
            background-color: #e9ecef;
        }

        .profile-image-container {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin-bottom: 20px;
            background-color: var(--light-blue);
            color: var(--dark-blue);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            font-weight: 600;
        }

        .add-field-btn {
            background-color: var(--light-blue);
            color: var(--dark-blue);
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-field-btn:hover {
            background-color: var(--secondary-blue);
            color: white;
        }

        .remove-field-btn {
            color: #dc3545;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
            margin-left: 10px;
        }

        .dynamic-field {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .dynamic-field input {
            flex-grow: 1;
        }

        .card {
            border-radius: 10px;
            border: 1px solid rgba(0, 119, 190, 0.2);
            transition: all 0.3s ease;
        }
        
        .card:hover {
            box-shadow: 0 5px 15px rgba(0, 119, 190, 0.1);
            transform: translateY(-2px);
        }
        
        .card-title {
            color: var(--dark-blue);
            font-size: 1.1rem;
            font-weight: 600;
        }
        
        .input-group-text {
            background-color: var(--light-blue);
            color: var(--dark-blue);
            font-weight: 600;
            border-color: rgba(0, 119, 190, 0.2);
        }
        
        .form-section-title {
            color: var(--dark-blue);
            font-size: 1.3rem;
            margin-bottom: 10px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        /* FIXED: Page header styling with reduced spacing */
        .page-header {
            display: flex;
            align-items: center;
            justify-content: space-between;
            margin-bottom: 15px; /* Reduced from 30px */
        }

        .page-title {
            color: var(--dark-blue);
            font-size: 1.8rem;
            font-weight: 700;
            margin: 0;
        }

        /* FIXED: Back button styling */
        .btn-back {
            display: inline-flex;
            align-items: center;
            gap: 8px;
            background-color: var(--light-blue);
            color: var(--dark-blue);
            text-decoration: none;
            padding: 8px 16px;
            border-radius: 8px;
            font-weight: 500;
            font-size: 0.9rem;
            transition: all 0.3s ease;
            border: 1px solid rgba(0, 119, 190, 0.2);
            margin-bottom: 8px; /* Small margin below button */
        }

        .btn-back:hover {
            background-color: var(--primary-blue);
            color: white;
            text-decoration: none;
            transform: translateY(-1px);
        }

        .btn-back i {
            font-size: 0.9rem;
        }

        /* FIXED: Breadcrumb styling with reduced spacing */
        .breadcrumb {
            background: none;
            padding: 0;
            margin: 0;
            font-size: 0.85rem;
        }

        .breadcrumb-item {
            color: #6c757d;
        }

        .breadcrumb-item.active {
            color: var(--primary-blue);
            font-weight: 600;
        }

        .breadcrumb-item + .breadcrumb-item::before {
            content: "â€º";
            color: #6c757d;
        }

        /* FIXED: Navigation container with minimal spacing */
        .navigation-container {
            margin-bottom: 20px; /* Reduced from multiple margins */
        }

        /* Responsive design */
        @media (max-width: 768px) {
            .main-content {
                padding: 15px 20px;
            }
            
            .page-header {
                flex-direction: column;
                align-items: flex-start;
                gap: 10px;
                margin-bottom: 15px;
            }

            .btn-back {
                font-size: 0.8rem;
                padding: 6px 12px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="/provider/dashboard" class="sidebar-brand">
            <i class="bi bi-tools"></i> HandyHub Provider
        </a>
        <nav class="nav flex-column">
            <a class="nav-link active" href="/provider/dashboard">
                <i class="bi bi-person"></i> Profile
            </a>
            <a class="nav-link" href="/provider/bookings">
                <i class="bi bi-calendar-check"></i> Bookings
            </a>
            <a class="nav-link" href="/provider/reviews">
                <i class="bi bi-star"></i> Reviews & Ratings
            </a>
            <a class="nav-link" href="/provider/earnings">
                <i class="bi bi-wallet2"></i> Earnings
            </a>
            <a class="nav-link text-danger" href="/auth/logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- FIXED: Compact Navigation Section -->
        <div class="navigation-container">
            <a href="/provider/dashboard" class="btn-back">
                <i class="bi bi-arrow-left"></i>
                Back to Dashboard
            </a>
            
            <!-- Breadcrumb Navigation -->
            <nav aria-label="breadcrumb">
                <ol class="breadcrumb">
                    <li class="breadcrumb-item">
                        <a href="/provider/dashboard" style="color: #6c757d; text-decoration: none;">Dashboard</a>
                    </li>
                    <li class="breadcrumb-item active" aria-current="page">Edit Profile</li>
                </ol>
            </nav>
        </div>

        <!-- Messages Section -->
        <% if (locals.success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <% if (locals.error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <!-- Edit Profile Form -->
        <div class="edit-profile-section">
            <h3 class="section-title">Edit Profile</h3>
            
            <!-- Store provider data in hidden inputs for JS access -->
            <input type="hidden" id="providerData" 
                data-categories="<%= encodeURIComponent(JSON.stringify(provider.categories || [])) %>" 
                data-services="<%= encodeURIComponent(JSON.stringify(provider.services || [])) %>"
                data-availability="<%= encodeURIComponent(JSON.stringify(provider.availability || [])) %>"
                data-coverage-areas="<%= encodeURIComponent(JSON.stringify(provider.coverageAreas || [])) %>">
            
            <form action="/provider/profile/update" method="POST">
                <!-- Business Profile Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Business Profile</h4>
                    
                    <div class="d-flex justify-content-center mb-4">
                        <div class="profile-image-container">
                            <%= provider.business_name.charAt(0).toUpperCase() %>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="businessName" class="form-label">Business Name</label>
                        <input type="text" class="form-control" id="businessName" name="businessName" value="<%= provider.business_name %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" value="<%= provider.phone_number %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" name="email" value="<%= provider.email %>" readonly>
                        <small class="text-muted">Email address cannot be changed. Contact support for assistance.</small>
                    </div>
                </div>

                <!-- Service Categories Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Service Categories</h4>
                    <p class="text-muted mb-3">Select the categories that best describe your services:</p>
                    
                    <div class="row" id="categories-container">
                        <% 
                        // Define all available categories
                        const availableCategories = [
                            "Plumbing", 
                            "Electrical Repairs", 
                            "Roof Repairs", 
                            "Pest Control", 
                            "Carpentry Service", 
                            "AC Service", 
                            "Landscaping", 
                            "Home Cleaning", 
                            "Appliance Service"
                        ];
                        
                        // Get selected categories for easy lookup
                        const selectedCategories = provider.selectedCategories || [];
                        console.log('Selected categories for display:', selectedCategories);
                        
                        // Helper function to check if a category is selected
                        function isCategorySelected(categoryName) {
                            if (!selectedCategories || selectedCategories.length === 0) {
                                return false;
                            }
                            
                            const normalizedCategory = categoryName.toLowerCase().trim();
                            
                            return selectedCategories.some(selected => {
                                const normalizedSelected = selected.toLowerCase().trim();
                                
                                // Exact match
                                if (normalizedSelected === normalizedCategory) {
                                    return true;
                                }
                                
                                // Partial matches for variations
                                if (normalizedCategory.includes(normalizedSelected) || 
                                    normalizedSelected.includes(normalizedCategory)) {
                                    return true;
                                }
                                
                                // Special cases for common variations
                                if ((normalizedCategory.includes('electrical') && normalizedSelected.includes('electrical')) ||
                                    (normalizedCategory.includes('carpentry') && normalizedSelected.includes('carpentry')) ||
                                    (normalizedCategory.includes('appliance') && normalizedSelected.includes('appliance')) ||
                                    (normalizedCategory.includes('cleaning') && normalizedSelected.includes('cleaning'))) {
                                    return true;
                                }
                                
                                return false;
                            });
                        }
                        
                        // Generate checkboxes for each category
                        availableCategories.forEach((category, index) => { 
                            const isSelected = isCategorySelected(category);
                            console.log(`Category checkbox: ${category} => ${isSelected ? 'CHECKED' : 'unchecked'}`);
                        %>
                            <div class="col-md-4 mb-2">
                                <div class="form-check">
                                    <input 
                                        class="form-check-input category-checkbox" 
                                        type="checkbox" 
                                        name="categories[]" 
                                        value="<%= category %>" 
                                        id="category<%= index %>"
                                        <%= isSelected ? 'checked' : '' %>
                                        onchange="updatePricingSection()"
                                    >
                                    <label class="form-check-label" for="category<%= index %>">
                                        <%= category %>
                                    </label>
                                </div>
                            </div>
                        <% }); %>
                    </div>
                </div>

                <!-- Pricing Information Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Pricing Information</h4>
                    <p class="text-muted mb-3">Set your base fees for each service category:</p>
                    
                    <div id="pricing-container">
                        <!-- Pricing cards will be generated by JavaScript based on selected categories -->
                        <div class="alert alert-info">
                            <i class="bi bi-info-circle"></i> 
                            Select service categories above to set their base fees.
                        </div>
                    </div>
                </div>

                <!-- Service Coverage Area Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Service Coverage Area</h4>
                    <p class="text-muted mb-3">Select the states and cities where you provide your services:</p>
                    
                    <div class="card mb-3">
                        <div class="card-body">
                            <div class="row g-3 mb-3">
                                <div class="col-md-6">
                                    <label class="form-label small mb-1">State</label>
                                    <select id="stateSelect" class="form-select" onchange="loadCities()">
                                        <option value="">Select a state</option>
                                        <option value="1" data-code="01">Johor</option>
                                        <option value="2" data-code="02">Kedah</option>
                                        <option value="3" data-code="03">Kelantan</option>
                                        <option value="4" data-code="04">Melaka</option>
                                        <option value="5" data-code="05">Negeri Sembilan</option>
                                        <option value="6" data-code="06">Pahang</option>
                                        <option value="7" data-code="07">Pulau Pinang</option>
                                        <option value="8" data-code="08">Perak</option>
                                        <option value="9" data-code="09">Perlis</option>
                                        <option value="10" data-code="10">Selangor</option>
                                        <option value="11" data-code="11">Terengganu</option>
                                        <option value="12" data-code="12">Sabah</option>
                                        <option value="13" data-code="13">Sarawak</option>
                                        <option value="14" data-code="14">Wilayah Persekutuan Kuala Lumpur</option>
                                        <option value="15" data-code="15">Wilayah Persekutuan Labuan</option>
                                        <option value="16" data-code="16">Wilayah Persekutuan Putrajaya</option>
                                    </select>
                                </div>
                                <div class="col-md-6">
                                    <label class="form-label small mb-1">City</label>
                                    <select id="citySelect" class="form-select" disabled>
                                        <option value="">Select a state first</option>
                                    </select>
                                </div>
                            </div>
                            
                            <button type="button" class="add-field-btn w-100" onclick="addCoverageArea()">
                                <i class="bi bi-plus-circle me-2"></i> Add to Coverage Area
                            </button>
                        </div>
                    </div>
                    
                    <div class="card">
                        <div class="card-header bg-light">
                            <h5 class="mb-0">Selected Coverage Areas</h5>
                        </div>
                        <div class="card-body p-0">
                            <table class="table mb-0">
                                <thead>
                                    <tr>
                                        <th>State</th>
                                        <th>City</th>
                                        <th width="80px">Action</th>
                                    </tr>
                                </thead>
                                <tbody id="coverageAreasList">
                                    <tr id="noCoverageRow">
                                        <td colspan="3" class="text-center text-muted py-4">No coverage areas selected yet</td>
                                    </tr>
                                </tbody>
                            </table>
                        </div>
                    </div>
                    
                    <!-- Hidden input to store coverage area data -->
                    <input type="hidden" name="coverageAreas" id="coverageAreasInput" value="[]">
                </div>

                <!-- Services Offered Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Services Offered</h4>
                    <div id="services-container">
                        <!-- Services will be populated by JavaScript -->
                    </div>
                    <button type="button" class="add-field-btn" onclick="addServiceField()">
                        <i class="bi bi-plus-circle"></i> Add Service
                    </button>
                </div>

                <!-- Availability Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Service Availability</h4>
                    <p class="text-muted mb-3">Set your regular working hours for each day of the week:</p>
                    
                    <div class="availability-container">
                        <!-- Days of the week -->
                        <% const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; %>
                        <% daysOfWeek.forEach(day => { 
                            // Find availability data for this day
                            let dayData = { is_available: true, start_time: '09:00', end_time: '17:00' };
                            
                            if (provider && provider.availability) {
                                const foundDay = provider.availability.find(d => d.day_of_week === day);
                                if (foundDay) {
                                    dayData = foundDay;
                                }
                            }
                        %>
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-3">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input availability-toggle" 
                                                    type="checkbox" 
                                                    id="<%= day.toLowerCase() %>Available" 
                                                    name="availableDays" 
                                                    value="<%= day %>"
                                                    <%= dayData.is_available ? 'checked' : '' %>
                                                    onchange="updateDayAvailability('<%= day.toLowerCase() %>', this.checked)">
                                                <label class="form-check-label" for="<%= day.toLowerCase() %>Available">
                                                    <strong><%= day %></strong>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-9 time-slots">
                                            <div class="row g-3" id="<%= day.toLowerCase() %>TimeSlots">
                                                <div class="col-md-5">
                                                    <label class="form-label small mb-1">Start Time</label>
                                                    <select class="form-select" name="startTime_<%= day %>" <%= dayData.is_available ? '' : 'disabled' %>>
                                                        <% 
                                                        // Get the start hour
                                                        const startTime = dayData.start_time || '09:00';
                                                        const startHour = parseInt(startTime.split(':')[0], 10);
                                                        
                                                        // Generate options
                                                        for(let hour = 6; hour <= 20; hour++) { 
                                                            const hourStr = hour < 10 ? '0' + hour : '' + hour;
                                                            let displayHour = hour;
                                                            let ampm = 'AM';
                                                            
                                                            if (hour === 12) {
                                                                displayHour = 12;
                                                                ampm = 'PM';
                                                            } else if (hour > 12) {
                                                                displayHour = hour - 12;
                                                                ampm = 'PM';
                                                            }
                                                            
                                                            const isSelected = hour === startHour;
                                                        %>
                                                            <option value="<%= hourStr %>:00" <%= isSelected ? 'selected' : '' %>>
                                                                <%= displayHour %>:00 <%= ampm %>
                                                            </option>
                                                        <% } %>
                                                    </select>
                                                </div>
                                                <div class="col-md-5">
                                                    <label class="form-label small mb-1">End Time</label>
                                                    <select class="form-select" name="endTime_<%= day %>" <%= dayData.is_available ? '' : 'disabled' %>>
                                                        <% 
                                                        // Get the end hour
                                                        const endTime = dayData.end_time || '17:00';
                                                        const endHour = parseInt(endTime.split(':')[0], 10);
                                                        
                                                        // Generate options
                                                        for(let hour = 6; hour <= 21; hour++) { 
                                                            const hourStr = hour < 10 ? '0' + hour : '' + hour;
                                                            let displayHour = hour;
                                                            let ampm = 'AM';
                                                            
                                                            if (hour === 12) {
                                                                displayHour = 12;
                                                                ampm = 'PM';
                                                            } else if (hour > 12) {
                                                                displayHour = hour - 12;
                                                                ampm = 'PM';
                                                            }
                                                            
                                                            const isSelected = hour === endHour;
                                                        %>
                                                            <option value="<%= hourStr %>:00" <%= isSelected ? 'selected' : '' %>>
                                                                <%= displayHour %>:00 <%= ampm %>
                                                            </option>
                                                        <% } %>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                        
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="slotDuration" class="form-label">Appointment Duration</label>
                                    <% 
                                    // Get slot duration from provider data
                                    let slotDuration = 60; // Default to 60 minutes
                                    if (provider && provider.availability && provider.availability.length > 0) {
                                        slotDuration = provider.availability[0].slot_duration || 60;
                                    }
                                    %>
                                    <select class="form-select" id="slotDuration" name="slotDuration">
                                        <option value="30" <%= slotDuration === 30 ? 'selected' : '' %>>30 minutes</option>
                                        <option value="60" <%= slotDuration === 60 ? 'selected' : '' %>>1 hour</option>
                                        <option value="90" <%= slotDuration === 90 ? 'selected' : '' %>>1.5 hours</option>
                                        <option value="120" <%= slotDuration === 120 ? 'selected' : '' %>>2 hours</option>
                                        <option value="180" <%= slotDuration === 180 ? 'selected' : '' %>>3 hours</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Buttons -->
                <div class="d-flex justify-content-end mt-4">
                    <a href="/provider/dashboard" class="btn btn-cancel">Cancel</a>
                    <button type="submit" class="btn btn-save">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

     <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>


<script>
        // Global variables
        let selectedCoverageAreas = [];
        let providerData = {};

        // Malaysian cities data structure (complete)
        const malaysianCities = {
            // Johor
            1: [
                { id: 1, name: 'Johor Bahru' }, { id: 2, name: 'Iskandar Puteri' }, { id: 3, name: 'Pasir Gudang' },
                { id: 4, name: 'Batu Pahat' }, { id: 5, name: 'Kluang' }, { id: 6, name: 'Segamat' },
                { id: 7, name: 'Muar' }, { id: 8, name: 'Kulai' }, { id: 9, name: 'Pontian' },
                { id: 10, name: 'Kota Tinggi' }, { id: 11, name: 'Tangkak' }, { id: 12, name: 'Yong Peng' },
                { id: 13, name: 'Simpang Renggam' }, { id: 14, name: 'Rengit' }, { id: 15, name: 'Pekan Nanas' },
                { id: 16, name: 'Ulu Tiram' }, { id: 17, name: 'Skudai' }, { id: 18, name: 'Senai' },
                { id: 19, name: 'Masai' }, { id: 20, name: 'Labis' }, { id: 21, name: 'Chaah' },
                { id: 22, name: 'Bakri' }, { id: 23, name: 'Parit Raja' }, { id: 24, name: 'Benut' },
                { id: 25, name: 'Ayer Hitam' }, { id: 26, name: 'Pagoh' }, { id: 27, name: 'Bukit Gambir' },
                { id: 28, name: 'Sri Gading' }, { id: 29, name: 'Endau' }, { id: 30, name: 'Pengerang' },
                { id: 31, name: 'Tenggaroh' }, { id: 32, name: 'Sungai Rengit' }
            ],
            // Kedah
            2: [
                { id: 33, name: 'Alor Setar' }, { id: 34, name: 'Sungai Petani' }, { id: 35, name: 'Kulim' },
                { id: 36, name: 'Langkawi' }, { id: 37, name: 'Jitra' }
            ],
            // Kelantan
            3: [
                { id: 38, name: 'Kota Bharu' }, { id: 39, name: 'Pasir Mas' }, { id: 40, name: 'Tumpat' },
                { id: 41, name: 'Tanah Merah' }, { id: 42, name: 'Machang' }, { id: 43, name: 'Kuala Krai' },
                { id: 44, name: 'Gua Musang' }, { id: 45, name: 'Jeli' }, { id: 46, name: 'Bachok' },
                { id: 47, name: 'Pasir Puteh' }, { id: 48, name: 'Rantau Panjang' }, { id: 49, name: 'Wakaf Bharu' },
                { id: 50, name: 'Pengkalan Chepa' }, { id: 51, name: 'Ketereh' }, { id: 52, name: 'Dabong' }
            ],
            // Melaka
            4: [
                { id: 53, name: 'Melaka City' }, { id: 54, name: 'Ayer Keroh' }, { id: 55, name: 'Batu Berendam' },
                { id: 56, name: 'Alor Gajah' }, { id: 57, name: 'Jasin' }, { id: 58, name: 'Bukit Beruang' },
                { id: 59, name: 'Masjid Tanah' }, { id: 60, name: 'Merlimau' }, { id: 61, name: 'Durian Tunggal' },
                { id: 62, name: 'Tangga Batu' }, { id: 63, name: 'Tanjung Kling' }
            ],
            // Negeri Sembilan
            5: [
                { id: 64, name: 'Seremban' }, { id: 65, name: 'Nilai' }, { id: 66, name: 'Port Dickson' },
                { id: 67, name: 'Bahau' }, { id: 68, name: 'Kuala Pilah' }, { id: 69, name: 'Tampin' },
                { id: 70, name: 'Rembau' }, { id: 71, name: 'Gemas' }, { id: 72, name: 'Lukut' },
                { id: 73, name: 'Mantin' }, { id: 74, name: 'Senawang' }, { id: 75, name: 'Lenggeng' },
                { id: 76, name: 'Juasseh' }, { id: 77, name: 'Batu Kikir' }, { id: 78, name: 'Pedas' }
            ],
            // Pahang
            6: [
                { id: 79, name: 'Kuantan' }, { id: 80, name: 'Temerloh' }, { id: 81, name: 'Bentong' },
                { id: 82, name: 'Raub' }, { id: 83, name: 'Jerantut' }, { id: 84, name: 'Kuala Lipis' },
                { id: 85, name: 'Maran' }, { id: 86, name: 'Pekan' }, { id: 87, name: 'Rompin' },
                { id: 88, name: 'Bera' }, { id: 89, name: 'Gambang' }, { id: 90, name: 'Karak' },
                { id: 91, name: 'Triang' }, { id: 92, name: 'Chenor' }, { id: 93, name: 'Sungai Lembing' },
                { id: 94, name: 'Jengka' }, { id: 95, name: 'Genting Highlands' }
            ],
            // Pulau Pinang
            7: [
                { id: 96, name: 'George Town' }, { id: 97, name: 'Bayan Lepas' }, { id: 98, name: 'Gelugor' },
                { id: 99, name: 'Ayer Itam' }, { id: 100, name: 'Tanjung Tokong' }, { id: 101, name: 'Tanjung Bungah' },
                { id: 102, name: 'Batu Ferringhi' }, { id: 103, name: 'Balik Pulau' }, { id: 104, name: 'Bukit Mertajam' },
                { id: 105, name: 'Seberang Jaya' }, { id: 106, name: 'Butterworth' }, { id: 107, name: 'Nibong Tebal' },
                { id: 108, name: 'Kepala Batas' }, { id: 109, name: 'Permatang Pauh' }, { id: 110, name: 'Simpang Ampat' },
                { id: 111, name: 'Juru' }, { id: 112, name: 'Sungai Ara' }, { id: 113, name: 'Teluk Kumbar' },
                { id: 114, name: 'Batu Maung' }, { id: 115, name: 'Penaga' }
            ],
            // Perak
            8: [
                { id: 116, name: 'Ipoh' }, { id: 117, name: 'Taiping' }, { id: 118, name: 'Batu Gajah' },
                { id: 119, name: 'Teluk Intan' }, { id: 120, name: 'Kuala Kangsar' }, { id: 121, name: 'Seri Iskandar' },
                { id: 122, name: 'Lumut' }, { id: 123, name: 'Sitiawan' }, { id: 124, name: 'Parit Buntar' },
                { id: 125, name: 'Kampar' }, { id: 126, name: 'Tapah' }, { id: 127, name: 'Tanjung Malim' },
                { id: 128, name: 'Manjung' }, { id: 129, name: 'Ayer Tawar' }, { id: 130, name: 'Pantai Remis' },
                { id: 131, name: 'Simpang Pulai' }, { id: 132, name: 'Bagan Serai' }, { id: 133, name: 'Slim River' },
                { id: 134, name: 'Tronoh' }
            ],
            // Perlis
            9: [
                { id: 135, name: 'Kangar' }, { id: 136, name: 'Arau' }, { id: 137, name: 'Kuala Perlis' }
            ],
            // Selangor
            10: [
                { id: 138, name: 'Shah Alam' }, { id: 139, name: 'Petaling Jaya' }, { id: 140, name: 'Subang Jaya' },
                { id: 141, name: 'Selayang' }, { id: 142, name: 'Kajang' }, { id: 143, name: 'Sepang' },
                { id: 144, name: 'Klang' }, { id: 145, name: 'Puchong' }, { id: 146, name: 'Ampang' },
                { id: 147, name: 'Rawang' }, { id: 148, name: 'Batu Caves' }, { id: 149, name: 'Bandar Baru Bangi' },
                { id: 150, name: 'Seri Kembangan' }, { id: 151, name: 'Hulu Langat' }, { id: 152, name: 'Bukit Beruntung' },
                { id: 153, name: 'Sungai Buloh' }, { id: 154, name: 'Tanjung Karang' }, { id: 155, name: 'Meru' },
                { id: 156, name: 'Kapar' }, { id: 157, name: 'Bestari Jaya' }
            ],
            // Terengganu
            11: [
                { id: 158, name: 'Kuala Terengganu' }, { id: 159, name: 'Dungun' }, { id: 160, name: 'Kemaman' },
                { id: 161, name: 'Marang' }, { id: 162, name: 'Chukai' }, { id: 163, name: 'Kijal' },
                { id: 164, name: 'Besut' }, { id: 165, name: 'Permaisuri' }, { id: 166, name: 'Setiu' },
                { id: 167, name: 'Paka' }
            ],
            // Sabah
            12: [
                { id: 168, name: 'Kota Kinabalu' }, { id: 169, name: 'Sandakan' }, { id: 170, name: 'Tawau' },
                { id: 171, name: 'Lahad Datu' }, { id: 172, name: 'Keningau' }, { id: 173, name: 'Semporna' },
                { id: 174, name: 'Kudat' }, { id: 175, name: 'Beaufort' }, { id: 176, name: 'Papar' },
                { id: 177, name: 'Tuaran' }, { id: 178, name: 'Kota Belud' }, { id: 179, name: 'Ranau' },
                { id: 180, name: 'Sipitang' }, { id: 181, name: 'Tenom' }, { id: 182, name: 'Tambunan' },
                { id: 183, name: 'Kunak' }, { id: 184, name: 'Pitas' }, { id: 185, name: 'Kota Marudu' },
                { id: 186, name: 'Nabawan' }, { id: 187, name: 'Kuala Penyu' }
            ],
            // Sarawak
            13: [
                { id: 188, name: 'Kuching' }, { id: 189, name: 'Miri' }, { id: 190, name: 'Sibu' },
                { id: 191, name: 'Bintulu' }, { id: 192, name: 'Samarahan' }, { id: 193, name: 'Serian' },
                { id: 194, name: 'Mukah' }, { id: 195, name: 'Kapit' }, { id: 196, name: 'Limbang' },
                { id: 197, name: 'Marudi' }, { id: 198, name: 'Belaga' }, { id: 199, name: 'Sri Aman' },
                { id: 200, name: 'Asajaya' }, { id: 201, name: 'Batang Ai' }, { id: 202, name: 'Tebedu' },
                { id: 203, name: 'Bekenu' }, { id: 204, name: 'Tatau' }, { id: 205, name: 'Lawas' },
                { id: 206, name: 'Pusa' }, { id: 207, name: 'Julau' }
            ],
            // Wilayah Persekutuan Kuala Lumpur
            14: [
                { id: 208, name: 'Kuala Lumpur' }, { id: 209, name: 'Bukit Bintang' }, { id: 210, name: 'KLCC' },
                { id: 211, name: 'Chinatown' }, { id: 212, name: 'Sri Hartamas' }, { id: 213, name: 'Taman Tun Dr. Ismail' },
                { id: 214, name: 'Mont Kiara' }, { id: 215, name: 'Damansara' }
            ],
            // Wilayah Persekutuan Labuan
            15: [
                { id: 216, name: 'Labuan' }, { id: 217, name: 'Victoria' }, { id: 218, name: 'Rancha-Rancha' },
                { id: 219, name: 'Kampung Sungai Pagar' }, { id: 220, name: 'Kampung Layang-Layang' }
            ],
            // Wilayah Persekutuan Putrajaya
            16: [
                { id: 221, name: 'Putrajaya' }, { id: 222, name: 'Presidential Palace' }, { id: 223, name: 'Putra Square' },
                { id: 224, name: 'Putrajaya Lake' }
            ]
        };

        // State names mapping
        const stateNames = {
            1: 'Johor', 2: 'Kedah', 3: 'Kelantan', 4: 'Melaka', 5: 'Negeri Sembilan',
            6: 'Pahang', 7: 'Pulau Pinang', 8: 'Perak', 9: 'Perlis', 10: 'Selangor',
            11: 'Terengganu', 12: 'Sabah', 13: 'Sarawak', 
            14: 'Wilayah Persekutuan Kuala Lumpur', 15: 'Wilayah Persekutuan Labuan', 
            16: 'Wilayah Persekutuan Putrajaya'
        };

        // Initialize everything when DOM is loaded
        document.addEventListener('DOMContentLoaded', function() {
            console.log('Initializing edit profile page...');
            
            // Load provider data
            loadProviderData();
            
            // Initialize form sections
            initializeServices();
            initializeCoverageAreas();
            updatePricingSection();
            
            // Setup event listeners
            setupEventListeners();
            
            console.log('Edit profile page initialized successfully');
        });

        // Load provider data from hidden input
        function loadProviderData() {
            try {
                const providerDataEl = document.getElementById('providerData');
                if (!providerDataEl) {
                    console.error('Provider data element not found');
                    return;
                }
                
                providerData = {
                    categories: JSON.parse(decodeURIComponent(providerDataEl.dataset.categories || '[]')),
                    services: JSON.parse(decodeURIComponent(providerDataEl.dataset.services || '[]')),
                    availability: JSON.parse(decodeURIComponent(providerDataEl.dataset.availability || '[]')),
                    coverageAreas: JSON.parse(decodeURIComponent(providerDataEl.dataset.coverageAreas || '[]'))
                };
                
                console.log('Loaded provider data:', providerData);
            } catch (error) {
                console.error('Error loading provider data:', error);
                providerData = { categories: [], services: [], availability: [], coverageAreas: [] };
            }
        }

        // Initialize services section
        function initializeServices() {
            const container = document.getElementById('services-container');
            if (!container) return;
            
            container.innerHTML = '';
            
            if (providerData.services && providerData.services.length > 0) {
                providerData.services.forEach(service => {
                    const serviceName = typeof service === 'string' ? service : service.service_name;
                    if (serviceName) {
                        addServiceField(serviceName);
                    }
                });
            } else {
                addServiceField('');
            }
            
            console.log('Initialized services');
        }

        // Add service field
        function addServiceField(value = '') {
            const container = document.getElementById('services-container');
            if (!container) return;
            
            const newField = document.createElement('div');
            newField.className = 'dynamic-field';
            newField.innerHTML = `
                <input type="text" class="form-control" name="services[]" value="${value}" placeholder="Enter a service" required>
                <button type="button" class="remove-field-btn" onclick="removeField(this)">
                    <i class="bi bi-x-circle"></i>
                </button>
            `;
            container.appendChild(newField);
        }

        // Remove service field
        function removeField(button) {
            const field = button.parentNode;
            const container = field.parentNode;
            
            if (container.children.length > 1) {
                container.removeChild(field);
            } else {
                const input = field.querySelector('input');
                if (input) input.value = '';
            }
        }

        // Initialize coverage areas
        function initializeCoverageAreas() {
            selectedCoverageAreas = [];
            
            if (providerData.coverageAreas && providerData.coverageAreas.length > 0) {
                providerData.coverageAreas.forEach(area => {
                    selectedCoverageAreas.push({
                        stateId: parseInt(area.state_id || area.stateId),
                        stateName: area.state_name || area.stateName,
                        cityId: parseInt(area.city_id || area.cityId),
                        cityName: area.city_name || area.cityName
                    });
                });
            }
            
            updateCoverageAreasList();
            console.log('Initialized coverage areas:', selectedCoverageAreas);
        }

        // Update pricing section based on selected categories
        function updatePricingSection() {
            const pricingContainer = document.getElementById('pricing-container');
            if (!pricingContainer) return;
            
            const selectedCheckboxes = document.querySelectorAll('.category-checkbox:checked');
            
            if (selectedCheckboxes.length === 0) {
                pricingContainer.innerHTML = `
                    <div class="alert alert-info">
                        <i class="bi bi-info-circle"></i> 
                        Select service categories above to set their base fees.
                    </div>
                `;
                return;
            }
            
            let pricingHTML = '';
            selectedCheckboxes.forEach((checkbox, index) => {
                const categoryName = checkbox.value;
                
                // Find existing data for this category
                const categoryData = findCategoryData(categoryName);
                const fee = categoryData ? categoryData.base_fee : 0;
                const feeType = categoryData ? categoryData.fee_type : 'per visit';
                
                pricingHTML += `
                    <div class="card mb-3">
                        <div class="card-body">
                            <h5 class="card-title">${categoryName}</h5>
                            
                            <div class="row g-3 align-items-center mb-3">
                                <div class="col-md-6">
                                    <label for="baseFee${index}" class="form-label">Base Fee (RM)</label>
                                    <div class="input-group">
                                        <span class="input-group-text">RM</span>
                                        <input 
                                            type="number" 
                                            class="form-control" 
                                            id="baseFee${index}" 
                                            name="baseFees[${categoryName}]" 
                                            value="${fee}" 
                                            min="0" 
                                            step="0.01"
                                            placeholder="0.00"
                                        >
                                    </div>
                                    <small class="text-muted">Enter the base fee for this service category</small>
                                </div>
                                
                                <div class="col-md-6">
                                    <label for="feeType${index}" class="form-label">Fee Type</label>
                                    <select class="form-select" id="feeType${index}" name="feeTypes[${categoryName}]">
                                        <option value="per visit" ${feeType === 'per visit' ? 'selected' : ''}>Per Visit</option>
                                        <option value="per hour" ${feeType === 'per hour' ? 'selected' : ''}>Per Hour</option>
                                        <option value="fixed" ${feeType === 'fixed' ? 'selected' : ''}>Fixed Price</option>
                                    </select>
                                    <small class="text-muted">Select how you'd like to charge for this service</small>
                                </div>
                            </div>
                        </div>
                    </div>
                `;
            });
            
            pricingContainer.innerHTML = pricingHTML;
        }

        // Find category data by name
        function findCategoryData(categoryName) {
            if (!providerData.categories) return null;
            
            return providerData.categories.find(cat => {
                const catName = cat.category_name || '';
                const normalizedCatName = catName.toLowerCase().trim();
                const normalizedSearchName = categoryName.toLowerCase().trim();
                
                return normalizedCatName === normalizedSearchName ||
                       normalizedCatName.includes(normalizedSearchName) ||
                       normalizedSearchName.includes(normalizedCatName);
            });
        }

        // Load cities based on selected state
        function loadCities() {
            const stateSelect = document.getElementById('stateSelect');
            const citySelect = document.getElementById('citySelect');
            const stateId = parseInt(stateSelect.value);
            
            citySelect.innerHTML = '';
            
            if (!stateId) {
                citySelect.innerHTML = '<option value="">Select a state first</option>';
                citySelect.disabled = true;
                return;
            }
            
            citySelect.disabled = false;
            citySelect.innerHTML = '<option value="">Select a city</option>';
            
            const cities = malaysianCities[stateId] || [];
            cities.forEach(city => {
                const option = document.createElement('option');
                option.value = city.id;
                option.textContent = city.name;
                citySelect.appendChild(option);
            });
        }

        // Add coverage area
        function addCoverageArea() {
            const stateSelect = document.getElementById('stateSelect');
            const citySelect = document.getElementById('citySelect');
            
            const stateId = parseInt(stateSelect.value);
            const cityId = parseInt(citySelect.value);
            
            if (!stateId) {
                alert('Please select a state');
                return;
            }
            
            if (!cityId) {
                alert('Please select a city');
                return;
            }
            
            const stateName = stateNames[stateId];
            const cities = malaysianCities[stateId] || [];
            const cityObj = cities.find(c => c.id === cityId);
            
            if (!cityObj) {
                alert('Invalid city selected');
                return;
            }
            
            const cityName = cityObj.name;
            
            // Check for duplicates
            const isDuplicate = selectedCoverageAreas.some(area => 
                area.stateId === stateId && area.cityId === cityId
            );
            
            if (isDuplicate) {
                alert(`${cityName}, ${stateName} is already in your coverage areas`);
                return;
            }
            
            selectedCoverageAreas.push({
                stateId, stateName, cityId, cityName
            });
            
            updateCoverageAreasList();
            
            // Reset selects
            citySelect.value = '';
            citySelect.disabled = true;
            stateSelect.value = '';
        }

        // Update coverage areas list
        function updateCoverageAreasList() {
            const coverageList = document.getElementById('coverageAreasList');
            const coverageAreasInput = document.getElementById('coverageAreasInput');
            
            if (!coverageList) return;
            
            coverageList.innerHTML = '';
            
            if (selectedCoverageAreas.length === 0) {
                const noRow = document.createElement('tr');
                noRow.id = 'noCoverageRow';
                noRow.innerHTML = '<td colspan="3" class="text-center text-muted py-4">No coverage areas selected yet</td>';
                coverageList.appendChild(noRow);
            } else {
                selectedCoverageAreas.forEach((area, index) => {
                    const row = document.createElement('tr');
                    
                    const stateCell = document.createElement('td');
                    stateCell.textContent = area.stateName;
                    
                    const cityCell = document.createElement('td');
                    cityCell.textContent = area.cityName;
                    
                    const actionCell = document.createElement('td');
                    actionCell.className = 'text-center';
                    
                    const removeButton = document.createElement('button');
                    removeButton.type = 'button';
                    removeButton.className = 'btn btn-sm btn-danger';
                    removeButton.innerHTML = '<i class="bi bi-trash"></i>';
                    removeButton.onclick = function() { 
                        selectedCoverageAreas.splice(index, 1);
                        updateCoverageAreasList();
                    };
                    
                    actionCell.appendChild(removeButton);
                    row.appendChild(stateCell);
                    row.appendChild(cityCell);
                    row.appendChild(actionCell);
                    coverageList.appendChild(row);
                });
            }
            
            if (coverageAreasInput) {
                coverageAreasInput.value = JSON.stringify(selectedCoverageAreas);
            }
        }

        // Update day availability
        function updateDayAvailability(day, isAvailable) {
            const timeSlots = document.getElementById(`${day}TimeSlots`);
            if (!timeSlots) return;
            
            const inputs = timeSlots.querySelectorAll('select');
            
            if (isAvailable) {
                timeSlots.style.opacity = '1';
                inputs.forEach(input => input.disabled = false);
            } else {
                timeSlots.style.opacity = '0.5';
                inputs.forEach(input => input.disabled = true);
            }
        }

        // Setup event listeners
        function setupEventListeners() {
            // Auto-dismiss alerts
            setTimeout(function() {
                const alerts = document.querySelectorAll('.alert');
                alerts.forEach(function(alert) {
                    const bsAlert = new bootstrap.Alert(alert);
                    bsAlert.close();
                });
            }, 5000);
        }
    </script>
</body>
</html>