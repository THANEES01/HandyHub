<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Edit Profile - HandyHub</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0077be;
            --secondary-blue: #00a2e8;
            --dark-blue: #003366;
            --light-blue: #e6f2ff;
            --sidebar-width: 250px;
        }

        body {
            min-height: 100vh;
            background-color: #f8f9fa;
        }

        /* Sidebar Styling */
        .sidebar {
            width: var(--sidebar-width);
            background-color: var(--dark-blue);
            min-height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding-top: 20px;
        }

        .sidebar-brand {
            color: white;
            font-size: 1.5rem;
            padding: 20px;
            text-decoration: none;
            display: block;
            margin-bottom: 20px;
        }

        .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 12px 20px;
            margin: 4px 0;
            transition: all 0.3s ease;
        }

        .nav-link:hover, .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
        }

        .nav-link i {
            margin-right: 10px;
        }

        /* Main Content Styling */
        .main-content {
            margin-left: var(--sidebar-width);
            padding: 30px;
        }

        .edit-profile-section {
            background: white;
            border-radius: 15px;
            padding: 30px;
            box-shadow: 0 2px 10px rgba(0,0,0,0.1);
            margin-bottom: 30px;
        }

        .section-title {
            font-size: 1.5rem;
            color: var(--dark-blue);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }

        .form-label {
            font-weight: 600;
            color: var(--dark-blue);
        }

        .form-control:focus {
            border-color: var(--primary-blue);
            box-shadow: 0 0 0 0.2rem rgba(0, 119, 190, 0.25);
        }

        .btn-save {
            background-color: var(--primary-blue);
            color: white;
            padding: 10px 25px;
            border-radius: 8px;
            border: none;
            transition: all 0.3s ease;
            font-weight: 500;
        }

        .btn-save:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
        }

        .btn-cancel {
            background-color: #f8f9fa;
            color: #333;
            padding: 10px 25px;
            border-radius: 8px;
            border: 1px solid #ddd;
            transition: all 0.3s ease;
            font-weight: 500;
            margin-right: 10px;
        }

        .btn-cancel:hover {
            background-color: #e9ecef;
        }

        .profile-image-container {
            width: 120px;
            height: 120px;
            border-radius: 50%;
            margin-bottom: 20px;
            background-color: var(--light-blue);
            color: var(--dark-blue);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 3rem;
            font-weight: 600;
        }

        .add-field-btn {
            background-color: var(--light-blue);
            color: var(--dark-blue);
            border: none;
            padding: 5px 10px;
            border-radius: 5px;
            margin-top: 10px;
            cursor: pointer;
            transition: all 0.3s ease;
        }

        .add-field-btn:hover {
            background-color: var(--secondary-blue);
            color: white;
        }

        .remove-field-btn {
            color: #dc3545;
            background: none;
            border: none;
            cursor: pointer;
            padding: 0;
            margin-left: 10px;
        }

        .dynamic-field {
            margin-bottom: 10px;
            display: flex;
            align-items: center;
        }

        .dynamic-field input {
            flex-grow: 1;
        }

        .card {
        border-radius: 10px;
        border: 1px solid rgba(0, 119, 190, 0.2);
        transition: all 0.3s ease;
    }
    
    .card:hover {
        box-shadow: 0 5px 15px rgba(0, 119, 190, 0.1);
        transform: translateY(-2px);
    }
    
    .card-title {
        color: var(--dark-blue);
        font-size: 1.1rem;
        font-weight: 600;
    }
    
    .input-group-text {
        background-color: var(--light-blue);
        color: var(--dark-blue);
        font-weight: 600;
        border-color: rgba(0, 119, 190, 0.2);
    }
    
    .form-section-title {
        color: var(--dark-blue);
        font-size: 1.3rem;
        margin-bottom: 10px;
        padding-bottom: 10px;
        border-bottom: 1px solid #eee;
    }

    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="/provider/dashboard" class="sidebar-brand">
            <i class="bi bi-tools"></i> HandyHub Provider
        </a>
        <nav class="nav flex-column">
            <a class="nav-link active" href="/provider/dashboard">
                <i class="bi bi-person"></i> Profile
            </a>
            <a class="nav-link" href="/provider/bookings">
                <i class="bi bi-calendar-check"></i> Bookings
            </a>
            <a class="nav-link" href="/provider/reviews">
                <i class="bi bi-star"></i> Reviews & Ratings
            </a>
            <a class="nav-link" href="/provider/earnings">
                <i class="bi bi-wallet2"></i> Earnings
            </a>
            <a class="nav-link text-danger" href="/auth/logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Messages Section -->
        <% if (locals.success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <% if (locals.error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <!-- Edit Profile Form -->
        <div class="edit-profile-section">
            <h3 class="section-title">Edit Profile</h3>
            
            <!-- Store provider data in hidden inputs for JS access -->
            <input type="hidden" id="providerData" data-categories="<%= encodeURIComponent(JSON.stringify(provider.categories || [])) %>" data-services="<%= encodeURIComponent(JSON.stringify(provider.services || [])) %>">
            
            <form action="/provider/profile/update" method="POST">
                <!-- Business Profile Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Business Profile</h4>
                    
                    <div class="d-flex justify-content-center mb-4">
                        <div class="profile-image-container">
                            <%= provider.business_name.charAt(0).toUpperCase() %>
                        </div>
                    </div>
                    
                    <div class="mb-3">
                        <label for="businessName" class="form-label">Business Name</label>
                        <input type="text" class="form-control" id="businessName" name="businessName" value="<%= provider.business_name %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="phoneNumber" class="form-label">Phone Number</label>
                        <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" value="<%= provider.phone_number %>" required>
                    </div>
                    
                    <div class="mb-3">
                        <label for="email" class="form-label">Email Address</label>
                        <input type="email" class="form-control" id="email" name="email" value="<%= provider.email %>" readonly>
                        <small class="text-muted">Email address cannot be changed. Contact support for assistance.</small>
                    </div>
                </div>

                
                <!-- Service Categories Section with Direct Checking -->
                    <div class="mb-4">
                        <h4 class="form-section-title">Service Categories</h4>
                        <p class="text-muted mb-3">Select the categories that best describe your services:</p>
                        
                        <div class="row" id="categories-container">
                            <% 
                            // Define all available categories
                            const availableCategories = [
                                "Plumbing", 
                                "Electrical Repairs", 
                                "Roof Repairs", 
                                "Pest Control", 
                                "Carpentry Service", 
                                "AC Service", 
                                "Landscaping", 
                                "Home Cleaning", 
                                "Appliance Service"
                            ];
                            
                            // For direct debug output
                            if (provider && provider.categories && Array.isArray(provider.categories)) {
                                console.log("Provider categories for checkbox checking:", 
                                    provider.categories.map(cat => typeof cat === 'string' ? cat : cat.category_name));
                            }
                            
                            // Helper function to check if a category is selected - with improved matching
                            function isCategorySelected(categoryName) {
                                if (!provider || !provider.categories || !Array.isArray(provider.categories)) {
                                    return false;
                                }
                                
                                const normalizedCategory = categoryName.toLowerCase().trim();
                                
                                for (const cat of provider.categories) {
                                    // Get category name from object or string
                                    const catName = typeof cat === 'string' ? cat : (cat.category_name || '');
                                    const dbCatLower = catName.toLowerCase().trim();
                                    
                                    // Exact match
                                    if (dbCatLower === normalizedCategory) {
                                        console.log(`Found exact match for ${categoryName}: ${catName}`);
                                        return true;
                                    }
                                    
                                    // UI category contains DB category (e.g., "Appliance Service" contains "appliance")
                                    if (normalizedCategory.includes(dbCatLower)) {
                                        console.log(`Found UI-contains-DB match for ${categoryName}: ${catName}`);
                                        return true; 
                                    }
                                    
                                    // DB category contains UI category's key part (e.g., "plumbingservice" contains "plumbing")
                                    const keyPart = normalizedCategory.split(' ')[0]; // First word is usually the key part
                                    if (dbCatLower.includes(keyPart)) {
                                        console.log(`Found DB-contains-key match for ${categoryName}: ${catName}`);
                                        return true;
                                    }
                                }
                                
                                return false;
                            }
                            
                            // Generate checkboxes for each category
                            availableCategories.forEach((category, index) => { 
                                const isSelected = isCategorySelected(category);
                                console.log(`Category checkbox: ${category} => ${isSelected ? 'CHECKED' : 'unchecked'}`);
                            %>
                                <div class="col-md-4 mb-2">
                                    <div class="form-check">
                                        <input 
                                            class="form-check-input category-checkbox" 
                                            type="checkbox" 
                                            name="categories[]" 
                                            value="<%= category %>" 
                                            id="category<%= index %>"
                                            <%= isSelected ? 'checked' : '' %>
                                        >
                                        <label class="form-check-label" for="category<%= index %>">
                                            <%= category %>
                                        </label>
                                    </div>
                                </div>
                            <% }); %>
                        </div>
                    </div>

                    <!-- Pricing Information Section -->
                    <div class="mb-4">
    <h4 class="form-section-title">Pricing Information</h4>
    <p class="text-muted mb-3">Set your base fees for each service category:</p>
    
    <div id="pricing-container">
        <% 
        // Directly use provider.categories without filtering through availableCategories
        if (!provider || !provider.categories || !Array.isArray(provider.categories) || provider.categories.length === 0) {
        %>
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 
                Select service categories above to set their base fees.
            </div>
        <% } else { 
            // Build pricing cards directly from provider categories
            provider.categories.forEach((categoryData, index) => {
                // Extract category name
                const categoryName = categoryData.category_name || "";
                
                // Convert first character to uppercase for display
                const displayName = categoryName.charAt(0).toUpperCase() + categoryName.slice(1);
                
                // Set fee and fee type
                const fee = categoryData.base_fee !== undefined ? categoryData.base_fee : 0;
                const feeType = categoryData.fee_type || 'per visit';
                
                console.log(`Direct pricing for ${displayName}:`, { fee, feeType });
        %>
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title"><%= displayName %></h5>
                    
                    <div class="row g-3 align-items-center mb-3">
                        <div class="col-md-6">
                            <label for="baseFee<%= index %>" class="form-label">Base Fee (RM)</label>
                            <div class="input-group">
                                <span class="input-group-text">RM</span>
                                <input 
                                    type="number" 
                                    class="form-control" 
                                    id="baseFee<%= index %>" 
                                    name="baseFees[<%= displayName %>]" 
                                    value="<%= fee %>" 
                                    min="0" 
                                    step="0.01"
                                    placeholder="0.00"
                                >
                            </div>
                            <small class="text-muted">Enter the base fee for this service category</small>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="feeType<%= index %>" class="form-label">Fee Type</label>
                            <select class="form-select" id="feeType<%= index %>" name="feeTypes[<%= displayName %>]">
                                <option value="per visit" <%= feeType === 'per visit' ? 'selected' : '' %>>Per Visit</option>
                                <option value="per hour" <%= feeType === 'per hour' ? 'selected' : '' %>>Per Hour</option>
                                <option value="fixed" <%= feeType === 'fixed' ? 'selected' : '' %>>Fixed Price</option>
                            </select>
                            <small class="text-muted">Select how you'd like to charge for this service</small>
                        </div>
                    </div>
                </div>
            </div>
        <% }); } %>
    </div>
</div>

<!-- Services Offered Section - Direct Generation -->
<div class="mb-4">
    <h4 class="form-section-title">Services Offered</h4>
    <div id="services-container">
        <% 
        // Log the services data
        if (provider && provider.services) {
            console.log("Services for direct generation:", provider.services);
        }
        
        // Check if services data exists
        if (provider && provider.services && Array.isArray(provider.services) && provider.services.length > 0) {
            // Add each service
            provider.services.forEach(service => {
                // Extract service name from the object
                let serviceName = '';
                if (typeof service === 'string') {
                    serviceName = service;
                } else if (service.service_name) {
                    serviceName = service.service_name;
                }
                    
                if (serviceName) {
                    console.log(`Adding service field: ${serviceName}`);
        %>
                <div class="dynamic-field">
                    <input type="text" class="form-control" name="services[]" value="<%= serviceName %>" placeholder="Enter a service" required>
                    <button type="button" class="remove-field-btn" onclick="removeField(this)">
                        <i class="bi bi-x-circle"></i>
                    </button>
                </div>
        <%  }
            });
        } else {
            // Add an empty service field if no services
            console.log("No services found, adding empty field");
        %>
            <div class="dynamic-field">
                <input type="text" class="form-control" name="services[]" value="" placeholder="Enter a service" required>
                <button type="button" class="remove-field-btn" onclick="removeField(this)">
                    <i class="bi bi-x-circle"></i>
                </button>
            </div>
        <% } %>
    </div>
    <button type="button" class="add-field-btn" onclick="addServiceField()">
        <i class="bi bi-plus-circle"></i> Add Service
    </button>
</div>

                <!-- Availability Section -->
                <div class="mb-4">
                    <h4 class="form-section-title">Service Availability</h4>
                    <p class="text-muted mb-3">Set your regular working hours for each day of the week:</p>
                    
                    <div class="availability-container">
                        <!-- Days of the week -->
                        <% const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday']; %>
                        <% daysOfWeek.forEach(day => { 
                            // Find availability data for this day
                            let dayData = { is_available: true, start_time: '09:00', end_time: '17:00' };
                            
                            if (provider && provider.availability) {
                                const foundDay = provider.availability.find(d => d.day_of_week === day);
                                if (foundDay) {
                                    dayData = foundDay;
                                }
                            }
                        %>
                            <div class="card mb-3">
                                <div class="card-body">
                                    <div class="row align-items-center">
                                        <div class="col-md-3">
                                            <div class="form-check form-switch">
                                                <input class="form-check-input availability-toggle" 
                                                    type="checkbox" 
                                                    id="<%= day.toLowerCase() %>Available" 
                                                    name="availableDays" 
                                                    value="<%= day %>"
                                                    <%= dayData.is_available ? 'checked' : '' %>>
                                                <label class="form-check-label" for="<%= day.toLowerCase() %>Available">
                                                    <strong><%= day %></strong>
                                                </label>
                                            </div>
                                        </div>
                                        <div class="col-md-9 time-slots">
                                            <div class="row g-3" id="<%= day.toLowerCase() %>TimeSlots" style="<%= dayData.is_available ? '' : 'opacity: 0.5;' %>">
                                                <div class="col-md-5">
                                                    <label class="form-label small mb-1">Start Time</label>
                                                    <select class="form-select" name="startTime_<%= day %>" <%= dayData.is_available ? '' : 'disabled' %>>
                                                        <% 
                                                        // Get the start hour
                                                        const startTime = dayData.start_time || '09:00';
                                                        const startHour = parseInt(startTime.split(':')[0], 10);
                                                        
                                                        // Generate options
                                                        for(let hour = 6; hour <= 20; hour++) { 
                                                            const hourStr = hour < 10 ? '0' + hour : '' + hour;
                                                            const displayHour = hour > 12 ? hour - 12 : hour;
                                                            const ampm = hour >= 12 ? 'PM' : 'AM';
                                                            const isSelected = hour === startHour;
                                                        %>
                                                            <option value="<%= hourStr %>:00" <%= isSelected ? 'selected' : '' %>>
                                                                <%= displayHour %>:00 <%= ampm %>
                                                            </option>
                                                        <% } %>
                                                    </select>
                                                </div>
                                                <div class="col-md-5">
                                                    <label class="form-label small mb-1">End Time</label>
                                                    <select class="form-select" name="endTime_<%= day %>" <%= dayData.is_available ? '' : 'disabled' %>>
                                                        <% 
                                                        // Get the end hour
                                                        const endTime = dayData.end_time || '17:00';
                                                        const endHour = parseInt(endTime.split(':')[0], 10);
                                                        
                                                        // Generate options
                                                        for(let hour = 6; hour <= 21; hour++) { 
                                                            const hourStr = hour < 10 ? '0' + hour : '' + hour;
                                                            const displayHour = hour > 12 ? hour - 12 : hour;
                                                            const ampm = hour >= 12 ? 'PM' : 'AM';
                                                            const isSelected = hour === endHour;
                                                        %>
                                                            <option value="<%= hourStr %>:00" <%= isSelected ? 'selected' : '' %>>
                                                                <%= displayHour %>:00 <%= ampm %>
                                                            </option>
                                                        <% } %>
                                                    </select>
                                                </div>
                                            </div>
                                        </div>
                                    </div>
                                </div>
                            </div>
                        <% }); %>
                        
                        <div class="card mb-3">
                            <div class="card-body">
                                <div class="mb-3">
                                    <label for="slotDuration" class="form-label">Appointment Duration</label>
                                    <% 
                                    // Get slot duration from provider data
                                    let slotDuration = 60; // Default to 60 minutes
                                    if (provider && provider.availability && provider.availability.length > 0) {
                                        slotDuration = provider.availability[0].slot_duration || 60;
                                    }
                                    %>
                                    <select class="form-select" id="slotDuration" name="slotDuration">
                                        <option value="30" <%= slotDuration === 30 ? 'selected' : '' %>>30 minutes</option>
                                        <option value="60" <%= slotDuration === 60 ? 'selected' : '' %>>1 hour</option>
                                        <option value="90" <%= slotDuration === 90 ? 'selected' : '' %>>1.5 hours</option>
                                        <option value="120" <%= slotDuration === 120 ? 'selected' : '' %>>2 hours</option>
                                        <option value="180" <%= slotDuration === 180 ? 'selected' : '' %>>3 hours</option>
                                    </select>
                                </div>
                            </div>
                        </div>
                    </div>
                </div>

                <!-- Form Buttons -->
                <div class="d-flex justify-content-end mt-4">
                    <a href="/provider/dashboard" class="btn btn-cancel">Cancel</a>
                    <button type="submit" class="btn btn-save">Save Changes</button>
                </div>
            </form>
        </div>
    </div>

    <!-- Store provider data in hidden input for JavaScript access -->
<input type="hidden" id="providerData" 
    data-categories="<%= encodeURIComponent(JSON.stringify(provider.categories || [])) %>" 
    data-services="<%= encodeURIComponent(JSON.stringify(provider.services || [])) %>"
    data-availability="<%= encodeURIComponent(JSON.stringify(provider.availability || [])) %>">

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>

        // Add this code to the top of your script section in edit-profile.ejs
// to immediately debug the issue on page load

document.addEventListener('DOMContentLoaded', function() {
    console.log("=== DEBUGGING TIME VALUES ===");
    
    // 1. Debug all time select elements
    const timeSelects = document.querySelectorAll('select[name^="startTime_"], select[name^="endTime_"]');
    
    console.log(`Found ${timeSelects.length} time select elements`);
    
    timeSelects.forEach(select => {
        console.log(`${select.name}: Current value = ${select.value}`);
        console.log(`Options count: ${select.options.length}`);
        
        // Log all available options
        let availableOptions = [];
        for(let i = 0; i < select.options.length; i++) {
            availableOptions.push({
                index: i,
                value: select.options[i].value,
                text: select.options[i].text
            });
        }
        console.table(availableOptions);
    });
    
    // 2. Debug provider data
    try {
        const providerDataEl = document.getElementById('providerData');
        if (providerDataEl) {
            console.log("Provider data element found");
            
            try {
                const availabilityData = JSON.parse(decodeURIComponent(providerDataEl.dataset.availability || '[]'));
                console.log("Availability data from dataset:", availabilityData);
                
                // Check if data matches what we expect
                if (availabilityData && availabilityData.length > 0) {
                    console.log("Sample day data:", availabilityData[0]);
                    console.log("Start time type:", typeof availabilityData[0].start_time);
                    console.log("Start time value:", availabilityData[0].start_time);
                }
            } catch (e) {
                console.error("Error parsing availability data:", e);
            }
        } else {
            console.error("Provider data element not found!");
        }
    } catch (e) {
        console.error("Error accessing provider data:", e);
    }
    
    // 3. Manual fix - directly set all time selects to the correct values from database
    setTimeout(function() {
        console.log("Applying manual time fix...");
        
        const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        
        daysOfWeek.forEach(day => {
            const startSelect = document.querySelector(`select[name="startTime_${day}"]`);
            const endSelect = document.querySelector(`select[name="endTime_${day}"]`);
            
            if (startSelect) {
                // Set to 09:00 AM (database value)
                console.log(`Setting ${day} start time to 09:00 AM`);
                setSelectValueByTime(startSelect, "09:00");
            }
            
            if (endSelect) {
                // Set to 17:00 (5:00 PM) (database value)
                console.log(`Setting ${day} end time to 17:00 (5:00 PM)`);
                setSelectValueByTime(endSelect, "17:00");
            }
        });
    }, 500); // Short delay to ensure the page is fully loaded
    
    // Helper function to set select to a specific time
    function setSelectValueByTime(selectElement, timeStr) {
        // First try direct match
        for (let i = 0; i < selectElement.options.length; i++) {
            if (selectElement.options[i].value === timeStr) {
                selectElement.selectedIndex = i;
                console.log(`Direct match found for ${timeStr} at index ${i}`);
                return true;
            }
        }
        
        // Try matching the hour
        const hourToMatch = parseInt(timeStr.split(':')[0], 10);
        
        for (let i = 0; i < selectElement.options.length; i++) {
            const optionHour = parseInt(selectElement.options[i].value.split(':')[0], 10);
            
            if (optionHour === hourToMatch) {
                selectElement.selectedIndex = i;
                console.log(`Hour match found for ${hourToMatch} at index ${i}, value ${selectElement.options[i].value}`);
                return true;
            }
        }
        
        // Last resort - set direct value
        selectElement.value = timeStr;
        console.log(`Direct value set to ${timeStr}`);
        
        return false;
    }
});


        
        document.addEventListener('DOMContentLoaded', function() {
    // Get provider data from hidden input
    const providerData = getProviderData();
    console.log('Provider data loaded:', providerData);
    
    // Initialize form components with provider data
    initializeBusinessProfile(providerData);
    initializeCategories(providerData.categories);
    initializeServices(providerData.services);
    initializeAvailability(providerData.availability);
    
    // Set up event listeners for form interactions
    setupEventListeners();
    
    // Auto-dismiss alerts after 5 seconds
    setupAlertDismissal();
});

// Function to retrieve provider data from hidden input
function getProviderData() {
    try {
        const providerDataEl = document.getElementById('providerData');
        if (!providerDataEl) {
            console.error('Provider data element not found');
            return { categories: [], services: [], availability: [] };
        }
        
        // Get and parse all data attributes
        const categories = JSON.parse(decodeURIComponent(providerDataEl.dataset.categories || '[]'));
        const services = JSON.parse(decodeURIComponent(providerDataEl.dataset.services || '[]'));
        const availability = JSON.parse(decodeURIComponent(providerDataEl.dataset.availability || '[]'));
        
        // Debug logging
        console.log('Raw provider data:');
        console.log('Categories:', categories);
        console.log('Services:', services);
        console.log('Availability:', availability);
        
        return {
            categories: categories,
            services: services,
            availability: availability
        };
    } catch (error) {
        console.error('Error parsing provider data:', error);
        return { categories: [], services: [], availability: [] };
    }
}

// Initialize business profile section (name, phone, email)
function initializeBusinessProfile(providerData) {
    if (!providerData) return;
    
    // Set business name
    const businessNameInput = document.getElementById('businessName');
    if (businessNameInput && providerData.business_name) {
        businessNameInput.value = providerData.business_name;
        console.log('Set business name:', providerData.business_name);
    }
    
    // Set phone number
    const phoneInput = document.getElementById('phoneNumber');
    if (phoneInput && providerData.phone_number) {
        phoneInput.value = providerData.phone_number;
        console.log('Set phone number:', providerData.phone_number);
    }
    
    // Email is read-only, so we don't need to set it
}

// Initialize service categories
function initializeCategories(categories) {
    if (!categories || !Array.isArray(categories)) {
        console.warn('No valid categories data provided');
        return;
    }
    
    console.log('Initializing', categories.length, 'categories');
    
    // Select all category checkboxes
    const checkboxes = document.querySelectorAll('.category-checkbox');
    if (!checkboxes.length) {
        console.warn('No category checkboxes found in the form');
        return;
    }
    
    // Uncheck all checkboxes first
    checkboxes.forEach(checkbox => checkbox.checked = false);
    
    // Check boxes that match provider's categories
    checkboxes.forEach(checkbox => {
        const categoryName = checkbox.value;
        const matchingCategory = findMatchingCategory(categoryName, categories);
        
        if (matchingCategory) {
            checkbox.checked = true;
            console.log('Selected category:', categoryName);
        }
    });
    
    // Update pricing section based on selected categories
    updatePricingSection(categories);
}

// Find a matching category by name with flexible matching
function findMatchingCategory(name, categoryList) {
    if (!categoryList || !Array.isArray(categoryList)) return null;
    
    const normalizedName = name.toLowerCase().trim();
    
    return categoryList.find(category => {
        // Handle category as string or object
        const categoryName = typeof category === 'string' 
            ? category 
            : (category.category_name || '');
        
        const normalizedCategoryName = categoryName.toLowerCase().trim();
        
        // Check for exact match or variations with spaces/underscores
        return normalizedCategoryName === normalizedName
            || normalizedCategoryName.replace(/_/g, ' ') === normalizedName
            || normalizedName.replace(/ /g, '_') === normalizedCategoryName;
    });
}

// Initialize services offered section
function initializeServices(services) {
    if (!services || !Array.isArray(services)) {
        console.warn('No valid services data provided');
        // Add an empty service field if none exists
        addServiceField();
        return;
    }
    
    console.log('Initializing', services.length, 'services');
    
    // Get the services container
    const container = document.getElementById('services-container');
    if (!container) {
        console.warn('Services container not found');
        return;
    }
    
    // Clear existing service fields
    container.innerHTML = '';
    
    // Add each service
    if (services.length > 0) {
        services.forEach(service => {
            // Extract service name from the object
            const serviceName = typeof service === 'string' 
                ? service 
                : (service.service_name || '');
                
            if (serviceName) {
                addServiceItem(serviceName);
                console.log('Added service:', serviceName);
            }
        });
    } else {
        // Add an empty service field if no services
        addServiceField();
    }
}

// Add a service field with a value
function addServiceItem(value) {
    const container = document.getElementById('services-container');
    if (!container) return;
    
    const newField = document.createElement('div');
    newField.className = 'dynamic-field';
    newField.innerHTML = `
        <input type="text" class="form-control" name="services[]" value="${value || ''}" placeholder="Enter a service" required>
        <button type="button" class="remove-field-btn" onclick="removeField(this)">
            <i class="bi bi-x-circle"></i>
        </button>
    `;
    container.appendChild(newField);
}

// Add an empty service field
function addServiceField() {
    addServiceItem('');
}

// Remove a service field
function removeField(button) {
    const field = button.parentNode;
    const container = field.parentNode;
    
    if (!container) return;
    
    // Don't remove the last field
    if (container.children.length > 1) {
        container.removeChild(field);
    } else {
        // Clear the input value instead
        const input = field.querySelector('input');
        if (input) input.value = '';
    }
}

// Initialize availability section
function initializeAvailability(availability) {
    if (!availability || !Array.isArray(availability)) {
        console.warn('No valid availability data provided');
        return;
    }
    
    console.log('Initializing availability for', availability.length, 'days');
    
    // Get all days of week
    const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
    
    // Process each day
    daysOfWeek.forEach(day => {
        // Find data for this day
        const dayData = availability.find(a => 
            a.day_of_week === day || 
            a.day_of_week.toLowerCase() === day.toLowerCase()
        );
        
        if (dayData) {
            console.log(`Setting availability for ${day}:`, dayData);
            
            // Set toggle status
            const toggle = document.getElementById(`${day.toLowerCase()}Available`);
            if (toggle) {
                toggle.checked = dayData.is_available === true;
                console.log(`${day} availability toggle:`, toggle.checked);
            }
            
            // Set start time
            if (dayData.start_time) {
                const startSelect = document.querySelector(`select[name="startTime_${day}"]`);
                if (startSelect) {
                    console.log(`Setting start time for ${day} to ${dayData.start_time}`);
                    selectTimeOption(startSelect, dayData.start_time);
                }
            }
            
            // Set end time
            if (dayData.end_time) {
                const endSelect = document.querySelector(`select[name="endTime_${day}"]`);
                if (endSelect) {
                    console.log(`Setting end time for ${day} to ${dayData.end_time}`);
                    selectTimeOption(endSelect, dayData.end_time);
                }
            }
            
            // Update UI based on availability
            updateDayAvailability(day.toLowerCase(), dayData.is_available === true);
        } else {
            console.warn(`No availability data found for ${day}`);
        }
    });
    
    // Set slot duration
    if (availability.length > 0 && availability[0].slot_duration) {
        const slotDuration = parseInt(availability[0].slot_duration);
        const durationSelect = document.getElementById('slotDuration');
        
        if (durationSelect) {
            for (let i = 0; i < durationSelect.options.length; i++) {
                if (parseInt(durationSelect.options[i].value) === slotDuration) {
                    durationSelect.selectedIndex = i;
                    console.log('Set slot duration:', slotDuration);
                    break;
                }
            }
        }
    }
}

// More reliable function to select time options
function selectTimeOption(selectElement, timeStr) {
    if (!selectElement || !timeStr) {
        console.warn('Invalid inputs to selectTimeOption', { selectElement, timeStr });
        return;
    }
    
    // Normalize time format to ensure HH:MM format
    let hours, minutes;
    
    // Handle various time formats
    if (typeof timeStr === 'string') {
        if (timeStr.includes(':')) {
            // Format like "09:00" or "9:00"
            [hours, minutes] = timeStr.split(':');
        } else {
            // Try to handle numeric format
            hours = timeStr;
            minutes = '00';
        }
    } else if (typeof timeStr === 'object' && timeStr.hours !== undefined) {
        // Handle time object format
        hours = timeStr.hours;
        minutes = timeStr.minutes || '00';
    } else {
        console.warn('Unrecognized time format:', timeStr);
        return;
    }
    
    // Convert to integers
    const hoursInt = parseInt(hours, 10);
    const minutesInt = parseInt(minutes, 10);
    
    // Format as HH:MM
    const formattedTime = `${hoursInt < 10 ? '0' + hoursInt : hoursInt}:${minutesInt < 10 ? '0' + minutesInt : minutesInt}`;
    
    console.log('Looking for time option:', formattedTime);
    
    // Try exact match first
    for (let i = 0; i < selectElement.options.length; i++) {
        if (selectElement.options[i].value === formattedTime) {
            selectElement.selectedIndex = i;
            console.log('Found exact match at index', i, ':', selectElement.options[i].value);
            return;
        }
    }
    
    // If no exact match, try matching just the hour
    for (let i = 0; i < selectElement.options.length; i++) {
        const optionHour = parseInt(selectElement.options[i].value.split(':')[0], 10);
        if (optionHour === hoursInt) {
            selectElement.selectedIndex = i;
            console.log('Found hour match at index', i, ':', selectElement.options[i].value);
            return;
        }
    }
    
    // Log all options for debugging
    console.log('Available options:');
    for (let i = 0; i < selectElement.options.length; i++) {
        console.log(`Option ${i}: ${selectElement.options[i].value}`);
    }
    
    console.warn('No matching option found for time:', formattedTime);
}

// Update day availability UI
function updateDayAvailability(day, isAvailable) {
    const timeSlots = document.getElementById(`${day}TimeSlots`);
    if (!timeSlots) {
        console.warn('Time slots element not found for day:', day);
        return;
    }
    
    const inputs = timeSlots.querySelectorAll('select');
    
    if (isAvailable) {
        timeSlots.style.opacity = '1';
        inputs.forEach(input => input.disabled = false);
    } else {
        timeSlots.style.opacity = '0.5';
        inputs.forEach(input => input.disabled = true);
    }
}

// Update pricing section based on selected categories
function updatePricingSection(providerCategories) {
    const pricingContainer = document.getElementById('pricing-container');
    if (!pricingContainer) {
        console.warn('Pricing container not found');
        return;
    }
    
    const selectedCheckboxes = document.querySelectorAll('.category-checkbox:checked');
    
    if (selectedCheckboxes.length === 0) {
        pricingContainer.innerHTML = `
            <div class="alert alert-info">
                <i class="bi bi-info-circle"></i> 
                Select service categories above to set their base fees.
            </div>
        `;
        return;
    }
    
    // Build pricing cards for selected categories
    let pricingHTML = '';
    selectedCheckboxes.forEach((checkbox, index) => {
        const categoryName = checkbox.value;
        
        // Find existing data for this category
        const categoryData = findMatchingCategory(categoryName, providerCategories);
        
        // Set default values or use existing data
        const fee = categoryData && categoryData.base_fee !== undefined 
            ? categoryData.base_fee 
            : 0;
            
        const feeType = categoryData && categoryData.fee_type 
            ? categoryData.fee_type 
            : 'per visit';
        
        console.log(`Building pricing for ${categoryName}:`, { fee, feeType });
        
        pricingHTML += `
            <div class="card mb-3">
                <div class="card-body">
                    <h5 class="card-title">${categoryName}</h5>
                    
                    <div class="row g-3 align-items-center mb-3">
                        <div class="col-md-6">
                            <label for="baseFee${index}" class="form-label">Base Fee (RM)</label>
                            <div class="input-group">
                                <span class="input-group-text">RM</span>
                                <input 
                                    type="number" 
                                    class="form-control" 
                                    id="baseFee${index}" 
                                    name="baseFees[${categoryName}]" 
                                    value="${fee}" 
                                    min="0" 
                                    step="0.01"
                                    placeholder="0.00"
                                >
                            </div>
                            <small class="text-muted">Enter the base fee for this service category</small>
                        </div>
                        
                        <div class="col-md-6">
                            <label for="feeType${index}" class="form-label">Fee Type</label>
                            <select class="form-select" id="feeType${index}" name="feeTypes[${categoryName}]">
                                <option value="per visit" ${feeType === 'per visit' ? 'selected' : ''}>Per Visit</option>
                                <option value="per hour" ${feeType === 'per hour' ? 'selected' : ''}>Per Hour</option>
                                <option value="fixed" ${feeType === 'fixed' ? 'selected' : ''}>Fixed Price</option>
                            </select>
                            <small class="text-muted">Select how you'd like to charge for this service</small>
                        </div>
                    </div>
                </div>
            </div>
        `;
    });
    
    pricingContainer.innerHTML = pricingHTML;
}

// Set up event listeners
function setupEventListeners() {
    // Category checkbox change
    const categoryCheckboxes = document.querySelectorAll('.category-checkbox');
    categoryCheckboxes.forEach(checkbox => {
        checkbox.addEventListener('change', function() {
            // Get provider data
            const providerData = getProviderData();
            updatePricingSection(providerData.categories);
        });
    });
    
    // Availability toggle change
    const availabilityToggles = document.querySelectorAll('.availability-toggle');
    availabilityToggles.forEach(toggle => {
        toggle.addEventListener('change', function() {
            const day = this.value.toLowerCase();
            updateDayAvailability(day, this.checked);
        });
    });
}

// Auto-dismiss alerts
function setupAlertDismissal() {
    setTimeout(function() {
        const alerts = document.querySelectorAll('.alert');
        alerts.forEach(function(alert) {
            const bsAlert = new bootstrap.Alert(alert);
            bsAlert.close();
        });
    }, 5000);
}

// Debugging helper function - can be called from browser console to troubleshoot
window.debugAvailability = function() {
    try {
        console.log("===== AVAILABILITY DEBUGGING =====");
        const providerDataEl = document.getElementById('providerData');
        const availability = JSON.parse(decodeURIComponent(providerDataEl.dataset.availability || '[]'));
        console.log('Availability data from dataset:', availability);
        
        // Check time selectors
        const daysOfWeek = ['Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday', 'Sunday'];
        
        daysOfWeek.forEach(day => {
            const startSelect = document.querySelector(`select[name="startTime_${day}"]`);
            const endSelect = document.querySelector(`select[name="endTime_${day}"]`);
            const toggle = document.getElementById(`${day.toLowerCase()}Available`);
            
            console.log(`${day}:`, {
                'Start Value': startSelect ? startSelect.value : 'N/A',
                'End Value': endSelect ? endSelect.value : 'N/A',
                'Toggle Checked': toggle ? toggle.checked : 'N/A'
            });
        });
        
        console.log("=================================");
    } catch (error) {
        console.error('Error in debugAvailability:', error);
    }
};
    </script>
</body>
</html>