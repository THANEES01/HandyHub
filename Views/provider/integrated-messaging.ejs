<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0077be;
            --secondary-blue: #00a2e8;
            --dark-blue: #003366;
            --light-blue: #e6f2ff;
            --sidebar-width: 250px;
        }
        body {
            min-height: 100vh;
            background-color: #f8f9fa;
            overflow-x: hidden;
        }

        /* Sidebar Styling */
        .sidebar {
            width: var(--sidebar-width);
            background-color: var(--dark-blue);
            min-height: 100vh;
            position: fixed;
            left: 0;
            top: 0;
            padding-top: 20px;
            z-index: 1030;
        }
        
        .sidebar-brand {
            color: white;
            font-size: 1.5rem;
            padding: 20px;
            text-decoration: none;
            display: block;
            margin-bottom: 20px;
        }
        
        .nav-link {
            color: rgba(255, 255, 255, 0.8);
            padding: 12px 20px;
            margin: 4px 0;
            transition: all 0.3s ease;
        }
        
        .nav-link:hover, .nav-link.active {
            color: white;
            background-color: rgba(255, 255, 255, 0.1);
        }
        
        .nav-link i {
            margin-right: 10px;
        }
        
        /* Main Content Styling */
        .main-content {
            margin-left: var(--sidebar-width);
            padding: 30px;
            display: flex;
            flex-direction: column;
            height: 100vh;
        }
        
        /* Conversation List Styling */
        .conversations-container {
            display: flex;
            height: calc(100vh - 100px);
            gap: 20px;
        }
        
        .conversation-list {
            width: 350px;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            display: flex;
            flex-direction: column;
            overflow: hidden;
        }
        
        .list-header {
            padding: 15px;
            border-bottom: 1px solid #f5f5f5;
            display: flex;
            justify-content: space-between;
            align-items: center;
            background-color: var(--primary-blue);
            color: white;
        }
        
        .list-body {
            flex: 1;
            overflow-y: auto;
            padding: 0;
        }
        
        .conversation-card {
            padding: 15px;
            border-bottom: 1px solid #f5f5f5;
            transition: all 0.3s ease;
            cursor: pointer;
            position: relative;
        }
        
        .conversation-card:hover {
            background-color: var(--light-blue);
        }
        
        .conversation-card.active {
            background-color: var(--light-blue);
        }
        
        .customer-info {
            display: flex;
            align-items: center;
            gap: 15px;
        }
        
        .customer-avatar {
            width: 40px;
            height: 40px;
            border-radius: 50%;
            background-color: var(--light-blue);
            color: var(--dark-blue);
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 1rem;
            font-weight: 600;
        }
        
        .conversation-details {
            flex: 1;
            min-width: 0; /* Allows text truncation to work */
        }
        
        .customer-name {
            font-weight: 600;
            font-size: 1rem;
            color: var(--dark-blue);
            margin-bottom: 5px;
            white-space: nowrap;
            overflow: hidden;
            text-overflow: ellipsis;
        }
        
        .last-message {
            color: #666;
            font-size: 0.85rem;
            display: -webkit-box;
            -webkit-line-clamp: 1;
            -webkit-box-orient: vertical;
            overflow: hidden;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #999;
            white-space: nowrap;
        }
        
        .unread-badge {
            background-color: var(--primary-blue);
            color: white;
            border-radius: 50%;
            width: 20px;
            height: 20px;
            display: flex;
            align-items: center;
            justify-content: center;
            font-size: 0.75rem;
            position: absolute;
            top: 15px;
            right: 15px;
        }
        
        /* Chat Styling */
        .chat-container {
            flex: 1;
            display: flex;
            flex-direction: column;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            overflow: hidden;
        }
        
        .empty-chat {
            flex: 1;
            display: flex;
            flex-direction: column;
            justify-content: center;
            align-items: center;
            background-color: white;
            border-radius: 10px;
            box-shadow: 0 2px 5px rgba(0,0,0,0.05);
            color: #999;
            padding: 20px;
        }
        
        .empty-chat i {
            font-size: 3rem;
            margin-bottom: 20px;
            color: #ccc;
        }
        
        .chat-header {
            background-color: var(--primary-blue);
            color: white;
            padding: 15px 20px;
            display: flex;
            align-items: center;
            justify-content: space-between;
        }
        
        .chat-header h2 {
            margin: 0;
            font-size: 1.2rem;
        }
        
        .chat-messages {
            flex: 1;
            overflow-y: auto;
            padding: 20px;
            display: flex;
            flex-direction: column;
            gap: 15px;
            background-color: #f9f9f9;
        }
        
        .message {
            max-width: 80%;
            padding: 10px 15px;
            border-radius: 15px;
            position: relative;
            word-break: break-word;
        }
        
        .message-time {
            font-size: 0.75rem;
            color: #666;
            margin-top: 5px;
            text-align: right;
        }
        
        .message-outgoing {
            align-self: flex-end;
            background-color: var(--primary-blue);
            color: white;
            border-bottom-right-radius: 5px;
        }
        
        .message-incoming {
            align-self: flex-start;
            background-color: #e6e6e6;
            color: #333;
            border-bottom-left-radius: 5px;
        }
        
        .chat-input {
            padding: 15px;
            border-top: 1px solid #eee;
            background-color: white;
        }
        
        .chat-input form {
            display: flex;
            gap: 10px;
        }
        
        .chat-input input {
            flex: 1;
            padding: 10px 15px;
            border: 1px solid #ddd;
            border-radius: 30px;
            outline: none;
        }
        
        .chat-input input:focus {
            border-color: var(--primary-blue);
        }
        
        .chat-input button {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            border-radius: 30px;
            padding: 10px 20px;
            cursor: pointer;
            transition: all 0.3s ease;
        }
        
        .chat-input button:hover {
            background-color: var(--dark-blue);
        }
        
        .read-status {
            font-size: 0.7rem;
            margin-top: 2px;
            text-align: right;
        }
        
        .read-status.read {
            color: #6c757d;
        }
        
        .read-status.unread {
            color: #adb5bd;
        }
        
        .typing-indicator {
            display: none;
            align-self: flex-start;
            background-color: #e6e6e6;
            color: #333;
            border-radius: 15px;
            padding: 8px 15px;
            font-size: 0.9rem;
        }
        
        .typing-indicator span {
            display: inline-block;
            width: 6px;
            height: 6px;
            background-color: #666;
            border-radius: 50%;
            animation: typing 1s infinite;
            margin: 0 1px;
        }
        
        .typing-indicator span:nth-child(2) {
            animation-delay: 0.2s;
        }
        
        .typing-indicator span:nth-child(3) {
            animation-delay: 0.4s;
        }
        
        /* Show placeholder when no conversation is selected */
        .chat-container {
            display: none;
        }
        
        .chat-container.active {
            display: flex;
        }
        
        .empty-chat.hidden {
            display: none;
        }
        
        @keyframes typing {
            0%, 100% {
                transform: translateY(0);
            }
            50% {
                transform: translateY(-5px);
            }
        }
        
        /* Responsive styles */
        @media (max-width: 992px) {
            .conversations-container {
                flex-direction: column;
            }
            
            .conversation-list {
                width: 100%;
                height: auto;
                max-height: 300px;
            }
            
            .chat-container, .empty-chat {
                margin-top: 20px;
            }
        }
        
        @media (max-width: 768px) {
            .main-content {
                padding: 15px;
            }
        }
    </style>
</head>
<body>
    <!-- Sidebar -->
    <div class="sidebar">
        <a href="/provider/dashboard" class="sidebar-brand">
            <i class="bi bi-tools"></i> HandyHub Provider
        </a>
        <nav class="nav flex-column">
            <a class="nav-link <%= currentPage === 'dashboard' ? 'active' : '' %>" href="/provider/dashboard">
                <i class="bi bi-person"></i> Profile
            </a>
            <a class="nav-link <%= currentPage === 'bookings' ? 'active' : '' %>" href="/provider/bookings">
                <i class="bi bi-calendar-check"></i> Bookings
            </a>
            <a class="nav-link <%= currentPage === 'conversations' ? 'active' : '' %>" href="/provider/conversations">
                <i class="bi bi-chat-dots"></i> Messages
                <span id="unread-badge" class="badge bg-danger rounded-pill" style="display: none;"></span>
            </a>
            <a class="nav-link <%= currentPage === 'reviews' ? 'active' : '' %>" href="/provider/reviews">
                <i class="bi bi-star"></i> Reviews & Ratings
            </a>
            <a class="nav-link <%= currentPage === 'earnings' ? 'active' : '' %>" href="/provider/earnings">
                <i class="bi bi-wallet2"></i> Earnings
            </a>
            <a class="nav-link text-danger" href="/auth/logout">
                <i class="bi bi-box-arrow-right"></i> Logout
            </a>
        </nav>
    </div>

    <!-- Main Content -->
    <div class="main-content">
        <!-- Messages Section -->
        <% if (locals.success) { %>
            <div class="alert alert-success alert-dismissible fade show" role="alert">
                <%= success %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>

        <% if (locals.error) { %>
            <div class="alert alert-danger alert-dismissible fade show" role="alert">
                <%= error %>
                <button type="button" class="btn-close" data-bs-dismiss="alert" aria-label="Close"></button>
            </div>
        <% } %>
        
        <!-- Page Header -->
        <div class="d-flex justify-content-between align-items-center mb-4">
            <h1 class="mb-0">Messages</h1>
            <a href="/provider/dashboard" class="btn btn-outline-primary">
                <i class="bi bi-arrow-left"></i> Back to Dashboard
            </a>
        </div>
        
        <!-- Conversations and Chat Container -->
        <div class="conversations-container">
            <!-- Conversations List -->
            <div class="conversation-list">
                <div class="list-header">
                    <h5 class="mb-0">Conversations</h5>
                    <span class="badge bg-light text-dark rounded-pill">
                        <% 
                            let totalUnread = 0;
                            conversations.forEach(conv => {
                                totalUnread += parseInt(conv.unread_count || 0);
                            });
                        %>
                        <%= totalUnread %> Unread
                    </span>
                </div>
                <div class="list-body">
                    <% if (conversations && conversations.length > 0) { %>
                        <% conversations.forEach(conv => { %>
                            <div class="conversation-card <%= activeConversation && activeConversation.id == conv.conversation_id ? 'active' : '' %>" 
                                 data-conversation-id="<%= conv.conversation_id %>"
                                 onclick="window.location.href='/provider/conversations?conversation=<%= conv.conversation_id %>'">
                                <% if (parseInt(conv.unread_count) > 0) { %>
                                    <div class="unread-badge">
                                        <%= conv.unread_count %>
                                    </div>
                                <% } %>
                                
                                <div class="customer-info">
                                    <div class="customer-avatar">
                                        <%= conv.customer_name.charAt(0).toUpperCase() %>
                                    </div>
                                    <div class="conversation-details">
                                        <div class="customer-name">
                                            <%= conv.customer_name %>
                                        </div>
                                        <div class="last-message">
                                            <%= conv.last_message || 'No messages yet' %>
                                        </div>
                                    </div>
                                </div>
                                
                                <div class="message-time mt-2 text-end">
                                    <% if (conv.last_message_time) { %>
                                        <% 
                                            const msgDate = new Date(conv.last_message_time);
                                            const today = new Date();
                                            const yesterday = new Date(today);
                                            yesterday.setDate(yesterday.getDate() - 1);
                                            
                                            if (msgDate.toDateString() === today.toDateString()) {
                                                // Show time only if today
                                                %><i class="bi bi-clock"></i> <%= msgDate.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %><%
                                            } else if (msgDate.toDateString() === yesterday.toDateString()) {
                                                // Show "Yesterday" if yesterday
                                                %><i class="bi bi-calendar-check"></i> Yesterday<%
                                            } else {
                                                // Show date otherwise
                                                %><i class="bi bi-calendar"></i> <%= msgDate.toLocaleDateString() %><%
                                            }
                                        %>
                                    <% } %>
                                </div>
                            </div>
                        <% }); %>
                    <% } else { %>
                        <div class="text-center py-5">
                            <i class="bi bi-chat-dots" style="font-size: 3rem; color: #ccc;"></i>
                            <h3 class="mt-3">No messages yet</h3>
                            <p class="text-muted">When customers message you, they will appear here.</p>
                        </div>
                    <% } %>
                </div>
            </div>
            
            <!-- Empty State (shown when no conversation is selected) -->
            <div class="empty-chat <%= activeConversation ? 'hidden' : '' %>" id="empty-chat">
                <i class="bi bi-chat-square-text"></i>
                <h3>Select a conversation</h3>
                <p class="text-center">Choose a conversation from the list to start chatting</p>
            </div>
            
            <!-- Active Chat -->
            <div class="chat-container <%= activeConversation ? 'active' : '' %>" id="chat-container">
                <% if (activeConversation) { %>
                    <div class="chat-header">
                        <div class="customer-info">
                            <div class="customer-avatar">
                                <%= activeConversation.customer_name.charAt(0).toUpperCase() %>
                            </div>
                            <h2><%= activeConversation.customer_name %></h2>
                        </div>
                        <div>
                            <!-- Button to check customer bookings -->
                            <a href="/provider/bookings" class="btn btn-sm btn-light">
                                <i class="bi bi-clipboard-check"></i> View Bookings
                            </a>
                        </div>
                    </div>
                    
                    <div class="chat-messages" id="chat-messages">
                        <% if (messages && messages.length > 0) { %>
                            <% messages.forEach(message => { %>
                                <div class="message <%= message.sender_type === 'provider' ? 'message-outgoing' : 'message-incoming' %>">
                                    <%= message.message_text %>
                                    <div class="message-time">
                                        <%= new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                                    </div>
                                    <% if (message.sender_type === 'provider') { %>
                                        <div class="read-status <%= message.is_read ? 'read' : 'unread' %>">
                                            <%= message.is_read ? 'Read' : 'Delivered' %>
                                        </div>
                                    <% } %>
                                </div>
                            <% }); %>
                        <% } else { %>
                            <div class="text-center text-muted my-4">
                                <p>No messages yet. Start the conversation!</p>
                            </div>
                        <% } %>
                        <div class="typing-indicator" id="typing-indicator">
                            <span></span>
                            <span></span>
                            <span></span>
                        </div>
                    </div>
                    
                    <div class="chat-input">
                        <form id="message-form">
                            <input type="text" id="message-input" placeholder="Type your message..." autocomplete="off" required>
                            <button type="submit">
                                <i class="bi bi-send"></i> Send
                            </button>
                        </form>
                    </div>
                <% } %>
            </div>
        </div>
    </div>

    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script src="/socket.io/socket.io.js"></script>
    <script>
        document.addEventListener('DOMContentLoaded', function() {
            <% if (activeConversation) { %>
                const messageForm = document.getElementById('message-form');
                const messageInput = document.getElementById('message-input');
                const messagesContainer = document.getElementById('chat-messages');
                const typingIndicator = document.getElementById('typing-indicator');
                const conversationId = '<%= activeConversation.id %>';
                let lastMessageId = '<%= messages && messages.length > 0 ? messages[messages.length - 1].id : 0 %>';
                let typingTimeout;
                
                // Connect to Socket.IO with authentication
                const socket = io({
                    auth: {
                        conversationId: conversationId,
                        userType: 'provider'
                    }
                });
                
                // Join the conversation room
                socket.emit('join-conversation', {
                    conversationId: conversationId
                });
                
                // Handle incoming messages
                socket.on('receive-message', function(data) {
                    console.log('Received message:', data);
                    // Only add the message if it's not already in the view
                    if (data.sender_type === 'customer') {
                        addMessage(data, false);
                        // Mark message as read
                        socket.emit('mark-as-read', {
                            messageId: data.id,
                            conversationId: conversationId
                        });
                    }
                    
                    // Hide typing indicator
                    typingIndicator.style.display = 'none';
                });
                
                // Handle typing indicator
                socket.on('typing', function(data) {
                    if (data.sender_type === 'customer') {
                        typingIndicator.style.display = 'block';
                        messagesContainer.scrollTop = messagesContainer.scrollHeight;
                        
                        // Hide typing indicator after 3 seconds
                        clearTimeout(typingTimeout);
                        typingTimeout = setTimeout(() => {
                            typingIndicator.style.display = 'none';
                        }, 3000);
                    }
                });
                
                // Handle read receipts
                socket.on('message-read', function(data) {
                    // Update read status for all messages
                    const messages = document.querySelectorAll('.message.message-outgoing');
                    messages.forEach(message => {
                        const readStatus = message.querySelector('.read-status');
                        if (readStatus) {
                            readStatus.textContent = 'Read';
                            readStatus.classList.remove('unread');
                            readStatus.classList.add('read');
                        }
                    });
                });
                
                // Submit message form
                messageForm.addEventListener('submit', function(e) {
                    e.preventDefault();
                    
                    const message = messageInput.value.trim();
                    if (!message) return;
                    
                    console.log('Sending message:', message, 'to conversation:', conversationId);
                    
                    // Send message via API
                    fetch('/api/send-message', {
                        method: 'POST',
                        headers: {
                            'Content-Type': 'application/json',
                        },
                        body: JSON.stringify({
                            conversationId: conversationId,
                            message: message,
                        }),
                    })
                    .then(response => response.json())
                    .then(data => {
                        console.log('API response:', data);
                        if (data.success) {
                            // Add message to chat
                            addMessage(data.message, true);
                            
                            // Emit socket event for real-time
                            socket.emit('send-message', {
                                conversationId: conversationId,
                                message: data.message
                            });
                            
                            // Clear input
                            messageInput.value = '';
                        } else {
                            console.error('Error sending message:', data.error);
                            alert('Failed to send message: ' + (data.error || 'Unknown error'));
                        }
                    })
                    .catch(error => {
                        console.error('Fetch error:', error);
                        alert('Failed to send message. Please try again.');
                    });
                });
                
                // Typing indicator
                messageInput.addEventListener('input', function() {
                    socket.emit('typing', {
                        conversationId: conversationId,
                        sender_type: 'provider'
                    });
                });
                
                // Function to add a message to the chat
                function addMessage(message, isOutgoing) {
                    const messageElement = document.createElement('div');
                    messageElement.classList.add('message');
                    messageElement.classList.add(isOutgoing ? 'message-outgoing' : 'message-incoming');
                    
                    // Create message text
                    messageElement.textContent = message.message_text;
                    
                    // Create time element
                    const timeElement = document.createElement('div');
                    timeElement.classList.add('message-time');
                    const messageTime = new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
                    timeElement.textContent = messageTime;
                    messageElement.appendChild(timeElement);
                    
                    // Add read status for outgoing messages
                    if (isOutgoing) {
                        const readStatus = document.createElement('div');
                        readStatus.classList.add('read-status');
                        readStatus.classList.add(message.is_read ? 'read' : 'unread');
                        readStatus.textContent = message.is_read ? 'Read' : 'Delivered';
                        messageElement.appendChild(readStatus);
                    }
                    
                    // Add message to container
                    messagesContainer.appendChild(messageElement);
                    
                    // Scroll to bottom
                    messagesContainer.scrollTop = messagesContainer.scrollHeight;
                    
                    // Update last message ID
                    lastMessageId = message.id;

                    // Update conversation in the list
                    updateConversationListItem(message);
                }

                // Function to update the conversation list item with the latest message
                function updateConversationListItem(message) {
                    const conversationCard = document.querySelector(`.conversation-card[data-conversation-id="${conversationId}"]`);
                    if (conversationCard) {
                        const lastMessageElement = conversationCard.querySelector('.last-message');
                        if (lastMessageElement) {
                            lastMessageElement.textContent = message.message_text;
                        }

                        const timeElement = conversationCard.querySelector('.message-time');
                        if (timeElement) {
                            const now = new Date();
                            timeElement.innerHTML = `<i class="bi bi-clock"></i> ${now.toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'})}`;
                        }

                        // Move this conversation to the top if it's not already
                        const listBody = conversationCard.parentElement;
                        if (listBody && listBody.firstChild !== conversationCard) {
                            listBody.insertBefore(conversationCard, listBody.firstChild);
                        }
                    }
                }
                
                // Function to poll for new messages
                function pollMessages() {
                    fetch(`/api/messages/${conversationId}?lastMessageId=${lastMessageId}`)
                        .then(response => response.json())
                        .then(data => {
                            if (data.success && data.messages.length > 0) {
                                data.messages.forEach(message => {
                                    if (message.sender_type === 'customer') {
                                        addMessage(message, false);
                                    }
                                });
                            }
                        })
                        .catch(error => {
                            console.error('Error polling messages:', error);
                        });
                }
                
                // Scroll to bottom of chat on load
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Poll for new messages every 10 seconds as a fallback
                setInterval(pollMessages, 10000);
            <% } %>

            // Check for unread messages count
            function checkUnreadCount() {
                fetch('/api/unread-count')
                    .then(response => response.json())
                    .then(data => {
                        if (data.success) {
                            const unreadBadge = document.getElementById('unread-badge');
                            if (data.unreadCount > 0) {
                                unreadBadge.textContent = data.unreadCount;
                                unreadBadge.style.display = 'inline-block';
                            } else {
                                unreadBadge.style.display = 'none';
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error checking unread count:', error);
                    });
            }
            
            // Check unread count every 30 seconds
            setInterval(checkUnreadCount, 30000);
            
            // Check unread count on page load
            checkUnreadCount();
        });
    </script>
</body>
</html>