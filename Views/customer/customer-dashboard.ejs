<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title><%= title %></title>
    <!-- Bootstrap CSS -->
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <!-- Custom CSS -->
    <link rel="stylesheet" href="/css/style.css">
</head>

<style>
  /* Services Section Styling */
.services {
    padding: 70px 0;
    background-color: white;
}

.section-title {
    text-align: center;
    margin-bottom: 60px;
}

.section-title h2 {
    font-size: 2.5rem;
    color: var(--dark-blue);
    margin-bottom: 20px;
    font-weight: bold;
}

.section-title p {
    color: #666;
    font-size: 1.2rem;
    max-width: 700px;
    margin: 0 auto;
}

.service-card {
    background-color: white;
    border-radius: 15px;
    padding: 40px 30px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    transition: all 0.3s ease;
    height: 100%;
    border: none;
    text-align: center;
    display: flex;
    flex-direction: column;
    align-items: center;
    margin-bottom: 30px;
}

.service-card:hover {
    transform: translateY(-10px);
    box-shadow: 0 15px 30px rgba(0,0,0,0.1);
}

.service-icon {
    width: 80px;
    height: 80px;
    background-color: var(--light-blue);
    border-radius: 50%;
    display: flex;
    align-items: center;
    justify-content: center;
    margin: 0 auto 25px;
    transition: all 0.3s ease;
}

.service-card:hover .service-icon {
    background-color: var(--primary-blue);
}

.service-card:hover .service-icon i {
    color: white;
}

.service-icon i {
    font-size: 2.2rem;
    color: var(--primary-blue);
    transition: all 0.3s ease;
}

.service-card h4 {
    color: var(--dark-blue);
    margin: 0 0 15px 0;
    font-weight: 600;
    font-size: 1.4rem;
}

.service-card p {
    color: #666;
    margin: 0;
    line-height: 1.6;
    font-size: 1.1rem;
}

.btn-explore {
    background-color: var(--primary-blue);
    color: white;
    border: none;
    border-radius: 8px;
    padding: 8px 15px;
    font-weight: 500;
    transition: all 0.3s ease;
    margin-top: 15px;
    display: inline-block;
}

.btn-explore:hover {
    background-color: var(--dark-blue);
    transform: translateY(-2px);
    color: white;
}

/* Add spacing between service cards */
.services .row > div {
    padding: 15px;
}

/* Features Section Styling */
.features {
    padding: 80px 0;
    background-color: var(--light-blue);
}

.features .container {
    max-width: 1200px;
    margin: 0 auto;
}

.features .section-title {
    text-align: center;
    margin-bottom: 60px;
}

.features .section-title h2 {
    font-size: 2.5rem;
    color: var(--dark-blue);
    margin-bottom: 20px;
    font-weight: bold;
}

.features .section-title p {
    color: #666;
    font-size: 1.2rem;
    max-width: 600px;
    margin: 0 auto 40px;
}

.features .row {
    display: flex;
    justify-content: center;
    gap: 30px;
    padding: 0 20px;
}

.feature-item {
    background: white;
    padding: 40px;
    border-radius: 15px;
    transition: all 0.3s ease;
    text-align: center;
    width: 450px; /* Fixed width for both cards */
    min-height: 300px; /* Minimum height to ensure consistency */
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    display: flex;
    flex-direction: column;
    align-items: center;
    justify-content: center;
}

.feature-item:hover {
    transform: translateY(-5px);
    box-shadow: 0 10px 20px rgba(0,0,0,0.1);
}

.feature-icon {
    font-size: 3rem;
    color: var(--primary-blue);
    margin-bottom: 25px;
    display: inline-block;
}

.feature-item h4 {
    color: var(--dark-blue);
    margin-bottom: 20px;
    font-weight: 600;
    font-size: 1.5rem;
}

.feature-item p {
    color: #666;
    margin: 0;
    line-height: 1.6;
    font-size: 1.1rem;
    max-width: 350px; /* Control text width for better readability */
}

/* Responsive adjustments */
@media (max-width: 992px) {
    .features .row {
        flex-direction: column;
        align-items: center;
    }

    .feature-item {
        width: 100%;
        max-width: 450px;
    }
}

.dashboard-welcome {
    background-color: var(--light-blue);
    padding: 25px;
    border-radius: 15px;
    margin-bottom: 30px;
}

/* Dashboard Stats */
.stats {
    padding: 30px 0;
}

.stat-item {
    text-align: center;
    background: white;
    border-radius: 10px;
    padding: 20px;
    box-shadow: 0 5px 15px rgba(0,0,0,0.05);
    margin-bottom: 20px;
    height: 100%;
}

.stat-number {
    font-size: 2.5rem;
    font-weight: bold;
    color: var(--primary-blue);
    margin-bottom: 5px;
}

.stat-label {
    color: #666;
    font-size: 1rem;
}

/* Floating Chat Button Styles */
.message-tooltip {
    position: absolute;
    right: 75px;
    bottom: 10px;
    background-color: rgba(0, 0, 0, 0.7);
    color: white;
    padding: 8px 15px;
    border-radius: 20px;
    font-size: 0.9rem;
    opacity: 0;
    transition: opacity 0.3s ease;
    white-space: nowrap;
    z-index: 1001;
}

.message-tooltip::after {
    content: '';
    position: absolute;
    right: -8px;
    bottom: 12px;
    border-width: 8px 0 8px 8px;
    border-style: solid;
    border-color: transparent transparent transparent rgba(0, 0, 0, 0.7);
}

#floating-chat-button {
    touch-action: none; /* Improves touch handling */
    z-index: 1000;
}

/* Pulse animation for the floating button */
@keyframes pulse {
    0% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0.7);
    }
    70% {
        box-shadow: 0 0 0 10px rgba(0, 123, 255, 0);
    }
    100% {
        box-shadow: 0 0 0 0 rgba(0, 123, 255, 0);
    }
}

.pulse {
    animation: pulse 2s infinite;
}

/* Position the badge properly */
.btn-primary .badge {
    position: absolute;
    top: 0;
    right: 0;
    transform: translate(25%, -25%);
}

/* Notification animation */
@keyframes notify-bounce {
    0%, 20%, 50%, 80%, 100% {transform: translateY(0);}
    40% {transform: translateY(-5px);}
    60% {transform: translateY(-2px);}
}

.notify-animation {
    animation: notify-bounce 2s infinite;
}
</style>

<body>
    <!-- Navbar -->
    <%- include('../partials/navbar') %>

    <div class="container mt-4 mb-5">
        <div class="dashboard-welcome">
            <div class="row align-items-center">
                <div class="col-md-8">
                    <h2>Welcome, <%= user.firstName ? user.firstName : 'Customer' %></h2>
                    <p class="mb-0">Manage your service requests and bookings from your dashboard.</p>
                </div>
                <div class="col-md-4 text-md-end">
                    <p class="mb-0 text-muted"><%= new Date().toLocaleDateString('en-US', { weekday: 'long', year: 'numeric', month: 'long', day: 'numeric' }) %></p>
                </div>
            </div>
        </div>

        <!-- Dashboard Stats -->
        <div class="row">
            <div class="col-md-3 col-sm-6">
                <div class="stat-item">
                    <div class="stat-number"><%= totalBookings %></div>
                    <div class="stat-label">Total Bookings</div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stat-item">
                    <div class="stat-number"><%= activeServices %></div>
                    <div class="stat-label">Active Services</div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stat-item">
                    <div class="stat-number">RM<%= totalSpent %></div>
                    <div class="stat-label">Total Spent</div>
                </div>
            </div>
            <div class="col-md-3 col-sm-6">
                <div class="stat-item">
                    <div class="stat-number"><%= completedBookings %></div>
                    <div class="stat-label">Completed</div>
                </div>
            </div>
        </div>

        <!-- Services Section with Categories from Database -->
        <section class="services" id="services">
            <div class="section-title">
                <h2>Our Services</h2>
                <p>Choose from our wide range of professional home services, delivered by verified experts</p>
            </div>
            <div class="row">
                <% if (categories && categories.length > 0) { %>
                    <% 
                    // Map category names to their icons
                    const categoryIcons = {
                        'plumbing': 'bi-wrench',
                        'electrical': 'bi-lightning',
                        'roofing': 'bi-house',
                        'pest_control': 'bi-bug',
                        'carpentry': 'bi-tools',
                        'ac_service': 'bi-wind',
                        'landscaping': 'bi-tree',
                        'home_cleaning': 'bi-house-heart',
                        'appliance_service': 'bi-gear',
                        // Default icon for other categories
                        'default': 'bi-check-circle'
                    };
                    
                    // Function to get the appropriate icon
                    const getIcon = (category) => {
                        return categoryIcons[category] || categoryIcons.default;
                    };
        
                    // Map of standardized category descriptions
                    const categoryDescriptions = {
                        'plumbing': 'Expert plumbing solutions for leaks, repairs, and installations with 24/7 emergency service.',
                        'electrical': 'Professional electrical services for all your home wiring and installation needs.',
                        'roofing': 'Complete roofing solutions including repairs, maintenance, and installations.',
                        'pest_control': 'Effective pest control services to keep your home safe and hygienic.',
                        'carpentry': 'Custom carpentry solutions for furniture repairs and home improvements.',
                        'ac_service': 'Complete AC maintenance, repair, and installation services.',
                        'landscaping': 'Professional landscaping services to beautify your outdoor spaces.',
                        'home_cleaning': 'Comprehensive cleaning services for a spotless and healthy home.',
                        'appliance_service': 'Expert repair and maintenance for all home appliances.',
                        'default': 'Professional services provided by verified experts.'
                    };
                    
                    // Function to get the description for a category
                    const getDescription = (category) => {
                        return categoryDescriptions[category] || categoryDescriptions.default;
                    };
                    %>
                    
                    <% categories.forEach(function(category) { %>
                        <div class="col-lg-4 col-md-6 mb-4">
                            <div class="service-card">
                                <div class="service-icon">
                                    <i class="bi <%= getIcon(category.category_name) %>"></i>
                                </div>
                                <h4><%= category.display_name || category.category_name.charAt(0).toUpperCase() + category.category_name.slice(1) %></h4>
                                <p><%= getDescription(category.category_name) %></p>
                                <a href="/customer/category/<%= category.category_name %>" class="btn btn-explore">Explore Providers</a>
                            </div>
                        </div>
                    <% }); %>
                <% } else { %>
                    <div class="col-12">
                        <div class="alert alert-info text-center" role="alert">
                            No service categories available at the moment.
                        </div>
                    </div>
                <% } %>
            </div>
        </section>

        <!-- Features Section -->
        <section class="features">
            <div class="container">
                <div class="section-title">
                    <h2>Why Choose HandyHub?</h2>
                    <p>We deliver quality service with trusted professionals</p>
                </div>
                <div class="row">
                    <div class="feature-item">
                        <i class="bi bi-shield-check feature-icon"></i>
                        <h4>Verified Professionals</h4>
                        <p>All our service providers are thoroughly vetted and background checked for your peace of mind.</p>
                    </div>
                    <div class="feature-item">
                        <i class="bi bi-cash-stack feature-icon"></i>
                        <h4>Transparent Pricing</h4>
                        <p>Clear, upfront pricing with no hidden charges.</p>
                    </div>
                </div>
            </div>
        </section>
    </div>

    <!-- Floating Chat Button -->
    <div id="floating-chat-button" class="position-fixed bottom-0 end-0 mb-4 me-4" style="cursor: move;">
        <div class="message-tooltip" id="message-tooltip">View messages</div>
        <a href="/customer/conversations" class="btn btn-primary rounded-circle p-3 shadow-lg pulse d-flex align-items-center justify-content-center" style="width: 60px; height: 60px; transition: all 0.3s ease;">
            <i class="bi bi-chat-dots-fill" style="font-size: 1.5rem;"></i>
        </a>
    </div>

    <div id="contact">
        <!-- Footer -->
        <%- include('../partials/footer') %>
    </div>

    <!-- Bootstrap Bundle with Popper -->
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
    <script>
    document.addEventListener('DOMContentLoaded', function() {
        const floatingButton = document.getElementById('floating-chat-button');
        const tooltip = document.getElementById('message-tooltip');
        let isDragging = false;
        let offsetX, offsetY;
        let isTouchDevice = 'ontouchstart' in window || navigator.maxTouchPoints > 0;

        // Initialize button position from localStorage if available
        const savedPosition = localStorage.getItem('chatButtonPosition');
        if (savedPosition) {
            try {
                const position = JSON.parse(savedPosition);
                floatingButton.style.bottom = position.bottom + 'px';
                floatingButton.style.right = position.right + 'px';
            } catch (e) {
                console.error('Error parsing saved position:', e);
            }
        }

        // Show tooltip briefly on page load
        setTimeout(() => {
            tooltip.style.opacity = '1';
            setTimeout(() => {
                tooltip.style.opacity = '0';
            }, 3000);
        }, 1000);

        // Mouse/Touch event handlers
        if (isTouchDevice) {
            // Touch events for mobile
            floatingButton.addEventListener('touchstart', handleDragStart);
            document.addEventListener('touchmove', handleDragMove);
            document.addEventListener('touchend', handleDragEnd);
        } else {
            // Mouse events for desktop
            floatingButton.addEventListener('mousedown', handleDragStart);
            document.addEventListener('mousemove', handleDragMove);
            document.addEventListener('mouseup', handleDragEnd);
        }

        // Start dragging function
        function handleDragStart(e) {
            // For touch events, use the first touch point
            const event = (e.type === 'touchstart') ? e.touches[0] : e;
            
            // Don't start drag if clicking on the link or icon
            const target = event.target.tagName.toLowerCase();
            if (target === 'a' || target === 'i') {
                return;
            }
            
            isDragging = true;
            
            // Calculate the offset
            const rect = floatingButton.getBoundingClientRect();
            offsetX = event.clientX - rect.left;
            offsetY = event.clientY - rect.top;
            
            // Change appearance to indicate dragging
            floatingButton.style.opacity = '0.8';
            
            // Prevent default to avoid scrolling on mobile
            e.preventDefault();
        }

        // Dragging function
        function handleDragMove(e) {
            if (!isDragging) return;
            
            // For touch events, use the first touch point
            const event = (e.type === 'touchmove') ? e.touches[0] : e;
            
            // Calculate new position
            const windowWidth = window.innerWidth;
            const windowHeight = window.innerHeight;
            const buttonWidth = floatingButton.offsetWidth;
            const buttonHeight = floatingButton.offsetHeight;
            
            const left = event.clientX - offsetX;
            const top = event.clientY - offsetY;
            
            // Keep button within viewport
            const right = Math.max(0, windowWidth - (left + buttonWidth));
            const bottom = Math.max(0, windowHeight - (top + buttonHeight));
            
            // Update position
            floatingButton.style.right = right + 'px';
            floatingButton.style.bottom = bottom + 'px';
            floatingButton.style.left = 'auto';
            floatingButton.style.top = 'auto';
            
            e.preventDefault(); // Prevent scrolling on mobile
        }

        // End dragging function
        function handleDragEnd() {
            if (isDragging) {
                isDragging = false;
                
                // Restore appearance
                floatingButton.style.opacity = '1';
                
                // Save position
                try {
                    const position = {
                        right: parseFloat(floatingButton.style.right) || 0,
                        bottom: parseFloat(floatingButton.style.bottom) || 0
                    };
                    localStorage.setItem('chatButtonPosition', JSON.stringify(position));
                } catch (e) {
                    console.error('Error saving position:', e);
                }
            }
        }

        // Show tooltip on hover/touch
        const showTooltip = () => {
            if (!isDragging) {
                tooltip.style.opacity = '1';
            }
        };
        
        const hideTooltip = () => {
            tooltip.style.opacity = '0';
        };

        // Add hover/touch events for tooltip
        if (isTouchDevice) {
            floatingButton.addEventListener('touchstart', function(e) {
                // Only show tooltip for brief touches on the button (not dragging)
                const touchDuration = 500; // ms
                const timer = setTimeout(showTooltip, touchDuration);
                
                floatingButton.addEventListener('touchend', function() {
                    clearTimeout(timer);
                    setTimeout(hideTooltip, 1500);
                }, { once: true });
                
                floatingButton.addEventListener('touchmove', function() {
                    clearTimeout(timer);
                    hideTooltip();
                }, { once: true });
            });
        } else {
            floatingButton.addEventListener('mouseenter', showTooltip);
            floatingButton.addEventListener('mouseleave', hideTooltip);
        }

        // Stop pulsing animation after 5 seconds
        setTimeout(() => {
            const button = floatingButton.querySelector('a');
            button.classList.remove('pulse');
        }, 5000);

        // Add unread message indicator
        function checkUnreadMessages() {
            fetch('/api/unread-count')
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.unreadCount > 0) {
                        // If there are unread messages, add a badge
                        let badge = document.getElementById('unread-badge');
                        if (!badge) {
                            badge = document.createElement('span');
                            badge.id = 'unread-badge';
                            badge.className = 'position-absolute top-0 start-100 translate-middle badge rounded-pill bg-danger';
                            badge.style.fontSize = '0.7rem';
                            floatingButton.querySelector('a').appendChild(badge);
                        }
                        badge.textContent = data.unreadCount;
                        
                        // Add notification animation to the button
                        const button = floatingButton.querySelector('a');
                        if (!button.classList.contains('pulse') && !button.classList.contains('notify-animation')) {
                            button.classList.add('notify-animation');
                        }
                    }
                })
                .catch(error => {
                    console.error('Error checking unread messages:', error);
                });
        }

        // Check for unread messages every 30 seconds
        setInterval(checkUnreadMessages, 30000);
        
        // Initial check
        checkUnreadMessages();
    });
</script>
</body>
</html>