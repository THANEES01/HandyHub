<!DOCTYPE html> 
<html lang="en"> <head> <meta charset="UTF-8"> <meta name="viewport" content="width=device-width, initial-scale=1.0"> 
<title><%= title %></title> 
<link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet"> 
<link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet"> 
<link rel="stylesheet" href="/css/style.css"> 
<style> 

    :root { 
        --primary-blue: #0077be; 
        --secondary-blue: #00a2e8; 
        --dark-blue: #003366; 
        --light-blue: #e6f2ff; 
    }

    .chat-container {
        height: calc(100vh - 200px);
        min-height: 400px;
        display: flex;
        flex-direction: column;
        background-color: white;
        border-radius: 10px;
        box-shadow: 0 2px 10px rgba(0,0,0,0.1);
        overflow: hidden;
    }
    
    .chat-header {
        background-color: var(--primary-blue);
        color: white;
        padding: 15px 20px;
        display: flex;
        align-items: center;
        justify-content: space-between;
    }
    
    .chat-header h2 {
        margin: 0;
        font-size: 1.2rem;
    }
    
    .chat-messages {
        flex: 1;
        overflow-y: auto;
        padding: 20px;
        display: flex;
        flex-direction: column;
        gap: 15px;
        background-color: #f9f9f9;
    }
    
    .message {
        max-width: 80%;
        padding: 10px 15px;
        border-radius: 15px;
        position: relative;
        word-break: break-word;
    }
    
    .message-time {
        font-size: 0.75rem;
        color: #666;
        margin-top: 5px;
        text-align: right;
    }
    
    .message-outgoing {
        align-self: flex-end;
        background-color: var(--primary-blue);
        color: white;
        border-bottom-right-radius: 5px;
    }
    
    .message-incoming {
        align-self: flex-start;
        background-color: #e6e6e6;
        color: #333;
        border-bottom-left-radius: 5px;
    }
    
    .chat-input {
        padding: 15px;
        border-top: 1px solid #eee;
        background-color: white;
    }
    
    .chat-input form {
        display: flex;
        gap: 10px;
    }
    
    .chat-input input {
        flex: 1;
        padding: 10px 15px;
        border: 1px solid #ddd;
        border-radius: 30px;
        outline: none;
    }
    
    .chat-input input:focus {
        border-color: var(--primary-blue);
    }
    
    .chat-input button {
        background-color: var(--primary-blue);
        color: white;
        border: none;
        border-radius: 30px;
        padding: 10px 20px;
        cursor: pointer;
        transition: all 0.3s ease;
    }
    
    .chat-input button:hover {
        background-color: var(--dark-blue);
    }
    
    .back-link {
        color: var(--primary-blue);
        text-decoration: none;
        display: inline-flex;
        align-items: center;
        margin-bottom: 20px;
    }
    
    .back-link i {
        margin-right: 5px;
    }
    
    .back-link:hover {
        text-decoration: underline;
    }
    
    .read-status {
        font-size: 0.7rem;
        margin-top: 2px;
        text-align: right;
    }
    
    .read-status.read {
        color: #6c757d;
    }
    
    .read-status.unread {
        color: #adb5bd;
    }
    
    .provider-info {
        display: flex;
        align-items: center;
        gap: 10px;
    }
    
    .avatar-circle {
        width: 40px;
        height: 40px;
        border-radius: 50%;
        background-color: var(--light-blue);
        color: var(--dark-blue);
        display: flex;
        align-items: center;
        justify-content: center;
        font-size: 1.2rem;
        font-weight: 600;
    }
    
    .typing-indicator {
        display: none;
        align-self: flex-start;
        background-color: #e6e6e6;
        color: #333;
        border-radius: 15px;
        padding: 8px 15px;
        font-size: 0.9rem;
    }
    
    .typing-indicator span {
        display: inline-block;
        width: 6px;
        height: 6px;
        background-color: #666;
        border-radius: 50%;
        animation: typing 1s infinite;
        margin: 0 1px;
    }
    
    .typing-indicator span:nth-child(2) {
        animation-delay: 0.2s;
    }
    
    .typing-indicator span:nth-child(3) {
        animation-delay: 0.4s;
    }
    
    @keyframes typing {
        0%, 100% {
            transform: translateY(0);
        }
        50% {
            transform: translateY(-5px);
        }
    }
</style>

</head> 

<body> <!-- Navbar --> <%- include('../partials/navbar') %>

    <div class="container mt-5 mb-5">
        <a href="/customer/conversations" class="back-link">
            <i class="bi bi-arrow-left"></i> Back to Conversations
        </a>
    
    <% if (locals.error) { %>
        <div class="alert alert-danger" role="alert">
            <%= error %>
        </div>
    <% } %>
    
    <div class="chat-container">
        <div class="chat-header">
            <div class="provider-info">
                <div class="avatar-circle">
                    <%= provider.business_name.charAt(0).toUpperCase() %>
                </div>
                <h2>
                    <%= provider.business_name %>
                    <% if (provider.is_verified) { %>
                        <i class="bi bi-check-circle-fill text-white ms-1" title="Verified Provider"></i>
                    <% } %>
                </h2>
            </div>
            <div>
                <a href="/customer/provider/<%= provider.id %>" class="btn btn-sm btn-light">
                    <i class="bi bi-info-circle"></i> View Profile
                </a>
            </div>
        </div>
        
        <div class="chat-messages" id="chat-messages">
            <% if (messages.length === 0) { %>
                <div class="text-center text-muted my-4">
                    <p>No messages yet. Start the conversation!</p>
                </div>
            <% } else { %>
                <% messages.forEach(message => { %>
                    <div class="message <%= message.sender_type === 'customer' ? 'message-outgoing' : 'message-incoming' %>">
                        <%= message.message_text %>
                        <div class="message-time">
                            <%= new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'}) %>
                        </div>
                        <% if (message.sender_type === 'customer') { %>
                            <div class="read-status <%= message.is_read ? 'read' : 'unread' %>">
                                <%= message.is_read ? 'Read' : 'Delivered' %>
                            </div>
                        <% } %>
                    </div>
                <% }); %>
            <% } %>
            <div class="typing-indicator" id="typing-indicator">
                <span></span>
                <span></span>
                <span></span>
            </div>
        </div>
        
        <div class="chat-input">
            <form id="message-form">
                <input type="text" id="message-input" placeholder="Type your message..." autocomplete="off" required>
                <button type="submit">
                    <i class="bi bi-send"></i> Send
                </button>
            </form>
        </div>
    </div>
</div>

<div id="contact">
    <!-- Footer  -->
    <%- include('../partials/footer') %>
</div>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>
<script src="/socket.io/socket.io.js"></script>
<script>
    document.addEventListener('DOMContentLoaded', function() {
        const messageForm = document.getElementById('message-form');
        const messageInput = document.getElementById('message-input');
        const messagesContainer = document.getElementById('chat-messages');
        const typingIndicator = document.getElementById('typing-indicator');
        const conversationId = '<%= conversationId %>';
        let lastMessageId = '<%= messages.length > 0 ? messages[messages.length - 1].id : 0 %>';
        let typingTimeout;
        
        // Connect to Socket.IO
        const socket = io({
            auth: {
                conversationId: conversationId,
                userType: 'customer'
            }
        });
        
        // Join the conversation room
        socket.emit('join-conversation', {
            conversationId: conversationId
        });
        
        // Handle incoming messages
        socket.on('receive-message', function(data) {
            // Only add the message if it's not already in the view
            if (data.sender_type === 'provider') {
                addMessage(data, false);
                // Mark message as read
                socket.emit('mark-as-read', {
                    messageId: data.id,
                    conversationId: conversationId
                });
            }
            
            // Hide typing indicator
            typingIndicator.style.display = 'none';
        });
        
        // Handle typing indicator
        socket.on('typing', function(data) {
            if (data.sender_type === 'provider') {
                typingIndicator.style.display = 'block';
                messagesContainer.scrollTop = messagesContainer.scrollHeight;
                
                // Hide typing indicator after 3 seconds
                clearTimeout(typingTimeout);
                typingTimeout = setTimeout(() => {
                    typingIndicator.style.display = 'none';
                }, 3000);
            }
        });
        
        // Handle read receipts
        socket.on('message-read', function(data) {
            // Update read status for all messages
            const messages = document.querySelectorAll('.message.message-outgoing');
            messages.forEach(message => {
                const readStatus = message.querySelector('.read-status');
                if (readStatus) {
                    readStatus.textContent = 'Read';
                    readStatus.classList.remove('unread');
                    readStatus.classList.add('read');
                }
            });
        });
        
        // Submit message form
        messageForm.addEventListener('submit', function(e) {
             e.preventDefault();
    
            const message = messageInput.value.trim();
            if (!message) return;
            
            // Debugging
            console.log('Sending message:', message);
            
            // Disable the form to prevent double submission
            const submitButton = this.querySelector('button[type="submit"]');
            submitButton.disabled = true;
            
            // Show a temporary message
            const tempMessage = document.createElement('div');
            tempMessage.classList.add('message', 'message-outgoing');
            tempMessage.innerHTML = `
                ${message}
                <div class="message-time">Sending...</div>
            `;
            messagesContainer.appendChild(tempMessage);
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Send message via API
            fetch('/api/send-message', {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json',
                },
                body: JSON.stringify({
                    conversationId: conversationId,
                    message: message,
                }),
            })
            .then(response => {
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(data => {
                console.log('API response:', data);
                
                // Remove temporary message
                messagesContainer.removeChild(tempMessage);
                
                if (data.success) {
                    // Add the confirmed message
                    addMessage(data.message, true);
                    
                    // Clear input
                    messageInput.value = '';
                    
                    // Try to emit via Socket.IO if available
                    try {
                        if (typeof socket !== 'undefined' && socket.connected) {
                            socket.emit('send-message', {
                                conversationId: conversationId,
                                message: data.message
                            });
                            console.log('Socket.IO event emitted');
                        } else {
                            console.warn('Socket.IO not connected, message sent via API only');
                        }
                    } catch (socketError) {
                        console.error('Socket.IO error:', socketError);
                    }
                } else {
                    console.error('API error:', data.error);
                    alert('Failed to send message: ' + (data.error || 'Unknown error'));
                }
            })
            .catch(error => {
                console.error('Fetch error:', error);
                
                // Remove temporary message
                messagesContainer.removeChild(tempMessage);
                
                // Show error
                alert('Failed to send message. Please try again.');
            })
            .finally(() => {
                // Re-enable the form
                submitButton.disabled = false;
            });
        });
        
        // Typing indicator
        messageInput.addEventListener('input', function() {
            socket.emit('typing', {
                conversationId: conversationId,
                sender_type: 'customer'
            });
        });
        
        // Function to add a message to the chat
        function addMessage(message, isOutgoing) {
            const messageElement = document.createElement('div');
            messageElement.classList.add('message');
            messageElement.classList.add(isOutgoing ? 'message-outgoing' : 'message-incoming');
            
            // Create message text
            messageElement.textContent = message.message_text;
            
            // Create time element
            const timeElement = document.createElement('div');
            timeElement.classList.add('message-time');
            const messageTime = new Date(message.created_at).toLocaleTimeString([], {hour: '2-digit', minute:'2-digit'});
            timeElement.textContent = messageTime;
            messageElement.appendChild(timeElement);
            
            // Add read status for outgoing messages
            if (isOutgoing) {
                const readStatus = document.createElement('div');
                readStatus.classList.add('read-status');
                readStatus.classList.add(message.is_read ? 'read' : 'unread');
                readStatus.textContent = message.is_read ? 'Read' : 'Delivered';
                messageElement.appendChild(readStatus);
            }
            
            // Add message to container
            messagesContainer.appendChild(messageElement);
            
            // Scroll to bottom
            messagesContainer.scrollTop = messagesContainer.scrollHeight;
            
            // Update last message ID
            lastMessageId = message.id;
        }
        
        // Function to poll for new messages
        function pollMessages() {
            fetch(`/api/messages/${conversationId}?lastMessageId=${lastMessageId}`)
                .then(response => response.json())
                .then(data => {
                    if (data.success && data.messages.length > 0) {
                        data.messages.forEach(message => {
                            if (message.sender_type === 'provider') {
                                addMessage(message, false);
                            }
                        });
                    }
                })
                .catch(error => {
                    console.error('Error polling messages:', error);
                });
        }
        
        // Scroll to bottom of chat on load
        messagesContainer.scrollTop = messagesContainer.scrollHeight;
        
        // Poll for new messages every 10 seconds as a fallback
        setInterval(pollMessages, 10000);
    });
</script>
</body> 
</html>
