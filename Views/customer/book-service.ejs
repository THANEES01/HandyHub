<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>Book Service - <%= provider.business_name %></title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.10.0/font/bootstrap-icons.css" rel="stylesheet">
    <link rel="stylesheet" href="/css/style.css">
    <style>
        .booking-container {
            max-width: 800px;
            margin: 0 auto;
        }
        
        .booking-header {
            background-color: var(--primary-blue);
            color: white;
            padding: 30px;
            border-radius: 15px 15px 0 0;
            margin-bottom: 0;
        }
        
        .booking-content {
            background-color: white;
            padding: 30px;
            border-radius: 0 0 15px 15px;
            box-shadow: 0 5px 20px rgba(0,0,0,0.1);
        }
        
        .provider-info {
            display: flex;
            align-items: center;
            background-color: var(--light-blue);
            padding: 15px;
            border-radius: 10px;
            margin-bottom: 30px;
        }
        
        .provider-icon {
            width: 50px;
            height: 50px;
            background-color: var(--primary-blue);
            color: white;
            border-radius: 50%;
            display: flex;
            align-items: center;
            justify-content: center;
            margin-right: 15px;
            flex-shrink: 0;
        }
        
        .provider-icon i {
            font-size: 1.5rem;
        }
        
        .provider-details h4 {
            margin-bottom: 5px;
            color: var(--dark-blue);
        }
        
        .provider-details p {
            margin-bottom: 0;
            color: #666;
        }
        
        .form-section {
            margin-bottom: 30px;
        }
        
        .form-section-title {
            font-size: 1.2rem;
            color: var(--dark-blue);
            margin-bottom: 20px;
            padding-bottom: 10px;
            border-bottom: 1px solid #eee;
        }
        
        .service-option {
            border: 2px solid #eee;
            border-radius: 10px;
            padding: 15px;
            margin-bottom: 15px;
            cursor: pointer;
            transition: all 0.2s ease;
        }
        
        .service-option:hover {
            border-color: var(--light-blue);
            background-color: #f9f9f9;
        }
        
        .service-option.selected {
            border-color: var(--primary-blue);
            background-color: var(--light-blue);
        }
        
        .service-option input[type="radio"] {
            margin-right: 10px;
        }
        
        .date-selection, .time-selection {
            margin-bottom: 20px;
        }
        
        .btn-submit {
            background-color: var(--primary-blue);
            color: white;
            border: none;
            padding: 12px 25px;
            font-weight: 500;
            border-radius: 8px;
            width: 100%;
            transition: all 0.3s ease;
        }
        
        .btn-submit:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
            color: white;
        }
        
        .back-link {
            color: var(--primary-blue);
            text-decoration: none;
            display: inline-flex;
            align-items: center;
            margin-bottom: 20px;
        }
        
        .back-link i {
            margin-right: 5px;
        }
        
        .back-link:hover {
            text-decoration: underline;
        }
        
        .custom-file-upload {
            display: block;
            padding: 12px;
            border: 1px solid #ddd;
            border-radius: 5px;
            background-color: #f8f9fa;
            cursor: pointer;
            transition: all 0.2s;
        }
        
        .custom-file-upload:hover {
            background-color: #e9ecef;
        }
        
        .preview-container {
            display: flex;
            flex-wrap: wrap;
            gap: 10px;
            margin-top: 10px;
        }
        
        .image-preview {
            width: 100px;
            height: 100px;
            object-fit: cover;
            border-radius: 5px;
            border: 1px solid #ddd;
        }
        
        .availability-info {
            transition: all 0.3s ease;
            border-radius: 8px;
        }

        .availability-info.alert-warning {
            background-color: #fff3cd;
            border-color: #ffecb5;
        }

        .refresh-slots-btn {
            display: inline-flex;
            align-items: center;
            gap: 5px;
            margin-top: 10px;
            padding: 5px 10px;
            background-color: #f8f9fa;
            border: 1px solid #dee2e6;
            border-radius: 4px;
            color: #212529;
            font-size: 0.9rem;
            cursor: pointer;
            transition: all 0.2s;
        }

        .refresh-slots-btn:hover {
            background-color: #e9ecef;
        }

        .refresh-icon {
            animation: spin 1s linear infinite;
        }

        @keyframes spin {
            from { transform: rotate(0deg); }
            to { transform: rotate(360deg); }
        }

        /* Validation styles */
        .form-control.is-invalid {
            border-color: #dc3545;
            box-shadow: 0 0 0 0.2rem rgba(220, 53, 69, 0.25);
        }

        .form-control.is-valid {
            border-color: #28a745;
            box-shadow: 0 0 0 0.2rem rgba(40, 167, 69, 0.25);
        }

        .invalid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #dc3545;
        }

        .valid-feedback {
            display: block;
            width: 100%;
            margin-top: 0.25rem;
            font-size: 0.875em;
            color: #28a745;
        }
    </style>
</head>
<body>
        <!-- Navbar -->
    <%- include('../partials/navbar') %>

    <div class="content-wrapper">
        <div class="container mt-5 mb-5">
            <a href="/customer/provider/<%= provider.id %><%= selectedCategory ? '?category=' + selectedCategory : '' %>" class="back-link">
                <i class="bi bi-arrow-left"></i>Back to Provider Profile
            </a>
            
            <div class="booking-container">
                <% if (locals.error) { %>
                    <div class="alert alert-danger" role="alert">
                        <%= error %>
                    </div>
                <% } %>
                
                <div class="booking-header">
                    <h2>Book Service</h2>
                    <p class="mb-0">Complete the form below to request a service booking</p>
                </div>
                
                <div class="booking-content">
                    <div class="provider-info">
                        <div class="provider-icon">
                            <i class="bi bi-person-gear"></i>
                        </div>
                        <div class="provider-details">
                            <h4><%= provider.business_name %></h4>
                            <% if (selectedCategory) { %>
                                <p><%= selectedCategory %></p>
                            <% } else { %>
                                <p><%= categories.map(cat => cat.category_name).join(', ') %></p>
                            <% } %>
                        </div>
                    </div>

                    <form action="/customer/book-service" method="POST" enctype="multipart/form-data" id="bookingForm">
                        <input type="hidden" name="providerId" value="<%= provider.id %>">
                        
                        <!-- Service Type Selection Section -->
                        <div class="form-section">
                            <h3 class="form-section-title">1. Service Details</h3>
                            
                            <% if (selectedCategory && categories.length > 0) { %>
                                <% const category = categories.find(cat => cat.category_name === selectedCategory); %>
                                <% if (category) { %>
                                    <div class="alert alert-info">
                                        <strong>Selected Service:</strong> <%= category.category_name %> - 
                                        <span class="badge bg-primary">RM <%= parseFloat(category.base_fee).toFixed(2) %> <%= category.fee_type %></span>
                                    </div>
                                    <input type="hidden" name="serviceType" value="<%= category.category_name %>">
                                    <input type="hidden" name="baseFee" value="<%= category.base_fee %>">
                                    <input type="hidden" name="feeType" value="<%= category.fee_type %>">
                                <% } else { %>
                                    <div class="alert alert-warning">
                                        <strong>Selected Service:</strong> <%= selectedCategory %> (pricing information not available)
                                    </div>
                                    <input type="hidden" name="serviceType" value="<%= selectedCategory %>">
                                <% } %>
                            <% } else if (categories && categories.length > 0) { %>
                                <div class="mb-3">
                                    <label for="serviceType" class="form-label">Select Service Type</label>
                                    <select class="form-select" id="serviceType" name="serviceType" required>
                                        <option value="" disabled selected>Select service type</option>
                                        <% categories.forEach(category => { %>
                                            <option value="<%= category.category_name %>" 
                                                    data-fee="<%= category.base_fee %>" 
                                                    data-fee-type="<%= category.fee_type %>">
                                                <%= category.category_name %> - RM <%= parseFloat(category.base_fee).toFixed(2) %> (<%= category.fee_type %>)
                                            </option>
                                        <% }); %>
                                    </select>
                                </div>
                                <!-- Hidden fields that will be updated by JavaScript when user selects a service -->
                                <input type="hidden" name="baseFee" value="<%= categories[0].base_fee %>">
                                <input type="hidden" name="feeType" value="<%= categories[0].fee_type %>">
                            <% } else { %>
                                <div class="alert alert-warning">
                                    <strong>No service categories available.</strong> Please contact support.
                                </div>
                            <% } %>

                            <!-- Hourly booking section -->
                            <div class="mb-3 hourly-booking-section" id="hourlyBookingSection" style="display: none;">
                                <label for="bookingHours" class="form-label">Number of Hours</label>
                                <div class="input-group">
                                    <input type="number" class="form-control" id="bookingHours" name="bookingHours" min="1" max="8" value="1">
                                    <span class="input-group-text">hours</span>
                                </div>
                                <small class="text-muted">Please specify how many hours you need the service for.</small>
                                <div class="mt-2">
                                    <span class="fw-bold">Base Rate:</span> RM <span id="hourlyBaseRate">0.00</span> per hour
                                </div>
                                <div class="mt-2">
                                    <span class="fw-bold">Total Fee:</span> RM <span id="totalFee">0.00</span>
                                </div>
                                <input type="hidden" name="totalFee" id="totalFeeInput" value="0">
                            </div>
                        </div>
                        
                        <!-- Issue Description Section -->
                        <div class="form-section">
                            <h3 class="form-section-title">2. Describe Your Issue</h3>
                            
                            <div class="mb-3">
                                <label for="issueDescription" class="form-label">Describe the Issue</label>
                                <textarea class="form-control" id="issueDescription" name="issueDescription" rows="4" placeholder="Please describe the problem in detail..." required></textarea>
                            </div>
                            
                            <div class="mb-3">
                                <label class="form-label">Upload Problem Pictures (Optional)</label>
                                <label for="problemImages" class="custom-file-upload">
                                    <i class="bi bi-camera me-2"></i> Choose Images
                                    <small class="d-block text-muted mt-1">You can select up to 5 images (10MB max each)</small>
                                </label>
                                <input type="file" id="problemImages" name="problemImages" multiple accept="image/jpeg,image/png,image/gif" style="display: none;">
                                <div id="imagePreviewContainer" class="preview-container mt-2"></div>
                                <div id="fileErrors" class="text-danger mt-2"></div>
                            </div>
                        </div>
                        
                        <!-- Service Location Section -->
                        <div class="form-section">
                            <h3 class="form-section-title">3. Service Location</h3>
                            
                            <div class="row">
                                <div class="col-12 mb-3">
                                    <label for="streetAddress" class="form-label">Street Address</label>
                                    <input type="text" class="form-control" id="streetAddress" name="streetAddress" placeholder="Enter your street address" required>
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="city" class="form-label">City</label>
                                    <input type="text" class="form-control" id="city" name="city" required>
                                </div>
                                
                                <div class="col-md-3 mb-3">
                                    <label for="state" class="form-label">State</label>
                                    <input type="text" class="form-control" id="state" name="state" required>
                                </div>
                                
                                <div class="col-md-3 mb-3">
                                    <label for="zipCode" class="form-label">ZIP Code</label>
                                    <input type="text" class="form-control" id="zipCode" name="zipCode" required>
                                </div>
                                
                                <div class="col-12 mb-3">
                                    <label for="accessInstructions" class="form-label">Access Instructions (Optional)</label>
                                    <textarea class="form-control" id="accessInstructions" name="accessInstructions" rows="2" placeholder="Gate code, entry instructions, parking information, etc."></textarea>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Service Schedule Section -->
                        <div class="form-section">
                            <h3 class="form-section-title">4. Schedule Service</h3>
                            
                            <div class="mb-3">
                                <label for="preferredDate" class="form-label">Preferred Date</label>
                                <input type="date" class="form-control" id="preferredDate" name="preferredDate" required>
                                <small class="text-muted">Select a date to see available time slots</small>
                            </div>
                            
                            <div class="mb-3">
                                <label for="timeSlot" class="form-label">Available Time Slots</label>
                                <select class="form-select" id="timeSlot" name="timeSlot" required disabled>
                                    <option value="" disabled selected>Please select a date first</option>
                                </select>
                                <small class="text-muted provider-schedule-info"></small>
                            </div>
                            
                            <!-- Provider availability information -->
                            <div class="alert alert-info availability-info mt-3" style="display: none;">
                                <div class="d-flex align-items-center">
                                    <i class="bi bi-info-circle me-2"></i>
                                    <div>
                                        <strong>Provider's Schedule:</strong>
                                        <span class="provider-hours"></span>
                                        <div class="small availability-note"></div>
                                    </div>
                                </div>
                            </div>
                        </div>
                        
                        <!-- Contact Information Section -->
                        <div class="form-section">
                            <h3 class="form-section-title">5. Contact Information</h3>
                            
                            <div class="row">
                                <div class="col-md-6 mb-3">
                                    <label for="fullName" class="form-label">Full Name</label>
                                    <input type="text" class="form-control" id="fullName" name="fullName" required>
                                </div>
                                
                                <div class="col-md-6 mb-3">
                                    <label for="phoneNumber" class="form-label">Phone Number</label>
                                    <input type="tel" class="form-control" id="phoneNumber" name="phoneNumber" required>
                                </div>
                                
                                <div class="col-12 mb-3">
                                    <label for="email" class="form-label">Email Address</label>
                                    <input type="email" class="form-control" id="email" name="email" required>
                                </div>
                            </div>
                        </div>
                        
                        <button type="submit" class="btn btn-submit" id="submitButton">
                            <i class="bi bi-calendar-check me-2"></i> Submit Service Request
                        </button>
                    </form>
                </div>
            </div>
        </div>
    </div>

    <div class="footer-wrapper">
        <!-- Footer -->
        <%- include('../partials/footer') %>
    </div>
    
    <script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.0-alpha1/dist/js/bootstrap.bundle.min.js"></script>

    <script>
    document.addEventListener('DOMContentLoaded', function() {
        // Set minimum date for booking to today
        const today = new Date().toISOString().split('T')[0];
        document.getElementById('preferredDate').min = today;
        
        // Real-time validation for required fields
        const requiredInputs = document.querySelectorAll('input[required], textarea[required], select[required]');

        requiredInputs.forEach(input => {
            input.addEventListener('blur', function() {
                validateField(this);
            });
            
            input.addEventListener('input', function() {
                // Remove invalid class when user starts typing
                if (this.classList.contains('is-invalid')) {
                    this.classList.remove('is-invalid');
                    const feedback = this.parentNode.querySelector('.invalid-feedback');
                    if (feedback) {
                        feedback.remove();
                    }
                }
            });
        });

        function validateField(field) {
            const value = field.value.trim();
            let isValid = true;
            let message = '';
            
            // Check if required field is empty
            if (field.hasAttribute('required') && !value) {
                isValid = false;
                message = `${field.previousElementSibling.textContent.replace('*', '')} is required.`;
            }
            
            // Specific validations
            if (value && field.type === 'email') {
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(value)) {
                    isValid = false;
                    message = 'Please enter a valid email address.';
                }
            }
            
            if (value && field.type === 'tel') {
                const phonePattern = /^[\+]?[\d\s\-\(\)]{8,}$/;
                if (!phonePattern.test(value)) {
                    isValid = false;
                    message = 'Please enter a valid phone number.';
                }
            }
            
            if (value && field.name === 'zipCode') {
                const zipPattern = /^\d{5}$/;
                if (!zipPattern.test(value)) {
                    isValid = false;
                    message = 'Please enter a valid 5-digit ZIP code.';
                }
            }
            
            // Update field appearance
            const existingFeedback = field.parentNode.querySelector('.invalid-feedback');
            if (existingFeedback) {
                existingFeedback.remove();
            }
            
            if (!isValid) {
                field.classList.add('is-invalid');
                field.classList.remove('is-valid');
                
                const feedback = document.createElement('div');
                feedback.className = 'invalid-feedback';
                feedback.textContent = message;
                field.parentNode.appendChild(feedback);
            } else if (value) {
                field.classList.add('is-valid');
                field.classList.remove('is-invalid');
            }
        }
        
        // Image preview functionality
        const imageInput = document.getElementById('problemImages');
        const previewContainer = document.getElementById('imagePreviewContainer');
        
        imageInput.addEventListener('change', function() {
            previewContainer.innerHTML = ''; // Clear previous previews
            
            if (this.files) {
                Array.from(this.files).forEach(file => {
                    if (file.type.match('image.*')) {
                        const reader = new FileReader();
                        
                        reader.onload = function(e) {
                            const img = document.createElement('img');
                            img.classList.add('image-preview');
                            img.src = e.target.result;
                            previewContainer.appendChild(img);
                        }
                        
                        reader.readAsDataURL(file);
                    }
                });
            }
        });
        
        // Service type selection functionality and hourly booking section
        const serviceTypeSelect = document.getElementById('serviceType');
        const hourlyBookingSection = document.getElementById('hourlyBookingSection');
        const hourlyBaseRateSpan = document.getElementById('hourlyBaseRate');
        const totalFeeSpan = document.getElementById('totalFee');
        const totalFeeInput = document.getElementById('totalFeeInput');
        
        // Function to update total fee calculation
        function updateTotalFee() {
            const bookingHoursInput = document.getElementById('bookingHours');
            const hours = parseInt(bookingHoursInput.value) || 1;
            const baseRate = parseFloat(hourlyBaseRateSpan.textContent) || 0;
            const total = hours * baseRate;
            totalFeeSpan.textContent = total.toFixed(2);
            totalFeeInput.value = total;
        }
        
        // Add event listener to booking hours input for Home Cleaning
        const bookingHoursInput = document.getElementById('bookingHours');
        if (bookingHoursInput) {
            bookingHoursInput.addEventListener('change', function() {
                const serviceTypeInput = document.querySelector('input[name="serviceType"][type="hidden"]') || 
                                       document.getElementById('serviceType');
                                       
                const serviceType = serviceTypeInput?.value || 
                                 (serviceTypeInput?.options ? serviceTypeInput.options[serviceTypeInput.selectedIndex]?.value : '');
                
                // Only reload time slots if Home Cleaning is selected and we have a date selected
                if (serviceType === 'Home Cleaning' && document.getElementById('preferredDate').value) {
                    // Update UI to show we're refreshing time slots
                    const timeSlotSelect = document.getElementById('timeSlot');
                    const wasDisabled = timeSlotSelect.disabled;
                    
                    if (!wasDisabled) {
                        timeSlotSelect.disabled = true;
                        const originalOptions = timeSlotSelect.innerHTML;
                        timeSlotSelect.innerHTML = '<option value="" disabled selected>Updating for ' + this.value + ' hour booking...</option>';
                        
                        // Small delay to ensure the UI updates before potentially heavy operation
                        setTimeout(function() {
                            loadAvailableTimeSlots();
                        }, 100);
                    } else {
                        // If already disabled (e.g., no date selected), just update the total fee
                        updateTotalFee();
                    }
                } else {
                    // For other service types, just update the fee
                    updateTotalFee();
                }
            });
        }
        
        if (serviceTypeSelect) {
            serviceTypeSelect.addEventListener('change', function() {
                const selectedOption = this.options[this.selectedIndex];
                const baseFee = selectedOption.getAttribute('data-fee');
                const feeType = selectedOption.getAttribute('data-fee-type');
                
                // Update hidden fields
                document.querySelector('input[name="baseFee"]').value = baseFee;
                document.querySelector('input[name="feeType"]').value = feeType;
                
                // Show/hide hourly booking section based on fee type
                if (feeType === 'per hour') {
                    hourlyBookingSection.style.display = 'block';
                    hourlyBaseRateSpan.textContent = parseFloat(baseFee).toFixed(2);
                    updateTotalFee();
                } else {
                    hourlyBookingSection.style.display = 'none';
                }
                
                console.log(`Updated service selection: ${this.value}, Fee: ${baseFee}, Type: ${feeType}`);
            });
            
            // Trigger the change event initially to set correct state
            if (serviceTypeSelect.value) {
                serviceTypeSelect.dispatchEvent(new Event('change'));
            }
        }
        
        // For pre-selected category
        window.addEventListener('load', function() {
            const preSelectedCategory = document.querySelector('input[name="serviceType"][type="hidden"]');
            const feeType = document.querySelector('input[name="feeType"][type="hidden"]');
            const baseFee = document.querySelector('input[name="baseFee"][type="hidden"]');
            
            if (preSelectedCategory && feeType && baseFee) {
                if (feeType.value === 'per hour') {
                    hourlyBookingSection.style.display = 'block';
                    hourlyBaseRateSpan.textContent = parseFloat(baseFee.value).toFixed(2);
                    updateTotalFee();
                }
            }
        });
        
        // Enhanced date selection for availability with real-time checking
        document.getElementById('preferredDate').addEventListener('change', function() {
            loadAvailableTimeSlots();
        });
        
        // Function to load available time slots
        function loadAvailableTimeSlots(isManualRefresh = false) {
            const dateInput = document.getElementById('preferredDate');
            const date = dateInput.value;
            const providerId = document.querySelector('input[name="providerId"]').value;
            const serviceTypeInput = document.querySelector('input[name="serviceType"][type="hidden"]') || 
                                   document.getElementById('serviceType');
            
            if (date) {
                // Show loading state
                const timeSlotSelect = document.getElementById('timeSlot');
                timeSlotSelect.innerHTML = '<option value="" disabled selected>Loading available slots...</option>';
                timeSlotSelect.disabled = true;
                
                // If it's a manual refresh, show a spinning icon on the refresh button if it exists
                if (isManualRefresh && document.querySelector('.refresh-slots-btn i')) {
                    const refreshBtn = document.querySelector('.refresh-slots-btn i');
                    refreshBtn.classList.add('refresh-icon');
                }
                
                // Get day of week from selected date
                const selectedDate = new Date(date);
                const dayOfWeek = ['Sunday', 'Monday', 'Tuesday', 'Wednesday', 'Thursday', 'Friday', 'Saturday'][selectedDate.getDay()];
                
                // Get service type and booking hours
                let serviceType = '';
                if (serviceTypeInput) {
                    serviceType = serviceTypeInput.value || (serviceTypeInput.options ? serviceTypeInput.options[serviceTypeInput.selectedIndex]?.value : '');
                }
                
                // Check if we need to handle multi-hour booking for Home Cleaning
                let bookingHours = 1;
                const feeType = document.querySelector('input[name="feeType"][type="hidden"]')?.value;
                const hourlyBookingSection = document.getElementById('hourlyBookingSection');
                
                if (serviceType === 'Home Cleaning' && feeType === 'per hour' && hourlyBookingSection && hourlyBookingSection.style.display !== 'none') {
                    bookingHours = parseInt(document.getElementById('bookingHours').value) || 1;
                }
                
                console.log(`Fetching slots for: Service=${serviceType}, Hours=${bookingHours}`);
                
                // Fetch available time slots for this date and provider
                fetch(`/api/available-slots?providerId=${providerId}&date=${date}&dayOfWeek=${dayOfWeek}&serviceType=${encodeURIComponent(serviceType)}&bookingHours=${bookingHours}`)
                    .then(response => response.json())
                    .then(data => {
                        timeSlotSelect.innerHTML = ''; // Clear existing options
                        timeSlotSelect.disabled = false;
                        
                        if (data.slots && data.slots.length > 0) {
                            // Add a default option
                            const defaultOption = document.createElement('option');
                            defaultOption.value = "";
                            defaultOption.textContent = "Select a time slot";
                            defaultOption.disabled = true;
                            defaultOption.selected = true;
                            timeSlotSelect.appendChild(defaultOption);
                            
                            // Add each available slot
                            data.slots.forEach(slot => {
                                const option = document.createElement('option');
                                option.value = slot;
                                option.textContent = slot;
                                timeSlotSelect.appendChild(option);
                            });
                            
                            // Show provider's available hours
                            const availabilityInfo = document.querySelector('.availability-info');
                            if (availabilityInfo) {
                                const providerHours = document.querySelector('.provider-hours');
                                if (providerHours) {
                                    providerHours.textContent = data.providerHours || `Available on ${dayOfWeek}`;
                                }
                                
                                availabilityInfo.style.display = 'block';
                                availabilityInfo.classList.add('alert-info');
                                availabilityInfo.classList.remove('alert-warning');
                                
                                const availabilityNote = document.querySelector('.availability-note');
                                if (availabilityNote) {
                                    if (data.isHomeCleaningMultiHour) {
                                        availabilityNote.textContent = `${data.slots.length} ${data.hoursRequested}-hour time slot${data.slots.length !== 1 ? 's' : ''} available on ${dayOfWeek}.`;
                                    } else {
                                        availabilityNote.textContent = `${data.slots.length} time slot${data.slots.length !== 1 ? 's' : ''} available on ${dayOfWeek}. Each slot is ${data.slotDuration || 60} minutes.`;
                                    }
                                }
                            }
                        } else {
                            const option = document.createElement('option');
                            option.value = "";
                            option.textContent = "No available slots for this date";
                            option.disabled = true;
                            option.selected = true;
                            timeSlotSelect.appendChild(option);
                            
                            // Show unavailability message
                            const availabilityInfo = document.querySelector('.availability-info');
                            if (availabilityInfo) {
                                availabilityInfo.style.display = 'block';
                                availabilityInfo.classList.add('alert-warning');
                                availabilityInfo.classList.remove('alert-info');
                                
                                const providerHours = document.querySelector('.provider-hours');
                                if (providerHours) {
                                    providerHours.textContent = data.providerHours || 'Not available on this date';
                                }
                                
                                const availabilityNote = document.querySelector('.availability-note');
                                if (availabilityNote) {
                                    if (data.isHomeCleaningMultiHour) {
                                        availabilityNote.textContent = `No ${data.hoursRequested}-hour consecutive slots available for this date. Try a different date or reduce hours.`;
                                    } else {
                                        availabilityNote.textContent = 'All time slots for this date have been booked. Please select another date.';
                                    }
                                }
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error fetching time slots:', error);
                        timeSlotSelect.innerHTML = '<option value="" disabled selected>Error loading time slots</option>';
                    })
                    .finally(() => {
                        // Remove spinning icon if it was a manual refresh
                        if (isManualRefresh && document.querySelector('.refresh-slots-btn i')) {
                            const refreshBtn = document.querySelector('.refresh-slots-btn i');
                            refreshBtn.classList.remove('refresh-icon');
                        }
                    });
            } else {
                const timeSlotSelect = document.getElementById('timeSlot');
                timeSlotSelect.innerHTML = '<option value="" disabled selected>Please select a date first</option>';
                timeSlotSelect.disabled = true;
                
                // Hide availability info
                const availabilityInfo = document.querySelector('.availability-info');
                if (availabilityInfo) {
                    availabilityInfo.style.display = 'none';
                }
            }
        }
        
        // Add a refresh button to the availability info box
        const availabilityInfo = document.querySelector('.availability-info');
        if (availabilityInfo) {
            const refreshButton = document.createElement('button');
            refreshButton.type = 'button';
            refreshButton.className = 'btn btn-sm btn-outline-secondary mt-2';
            refreshButton.innerHTML = '<i class="bi bi-arrow-clockwise"></i> Refresh Available Slots';
            refreshButton.onclick = function() { loadAvailableTimeSlots(true); };
            
            // Add the button after the availability-note div
            const availabilityNote = document.querySelector('.availability-note');
            if (availabilityNote && availabilityNote.parentNode) {
                availabilityNote.parentNode.appendChild(refreshButton);
            }
        }
        
        // Periodically refresh available time slots if the date is selected
        const refreshInterval = setInterval(function() {
            const dateInput = document.getElementById('preferredDate');
            const timeSlotSelect = document.getElementById('timeSlot');
            
            if (dateInput.value && !timeSlotSelect.disabled) {
                // Save the currently selected time slot
                const selectedValue = timeSlotSelect.value;
                
                // Load updated time slots
                fetch(`/api/available-slots?providerId=${document.querySelector('input[name="providerId"]').value}&date=${dateInput.value}`)
                    .then(response => response.json())
                    .then(data => {
                        // Check if the previously selected time slot is still available
                        if (selectedValue && data.slots && !data.slots.includes(selectedValue)) {
                            // Time slot is no longer available, show a warning
                            alert('The time slot you selected is no longer available. It may have been booked by another customer. Please select another time slot.');
                            
                            // Force reload available time slots
                            loadAvailableTimeSlots();
                        } else if (document.activeElement !== timeSlotSelect) {
                            // Only update the dropdown if user is not actively selecting
                            // This prevents disrupting the user's selection process
                            const wasEmpty = timeSlotSelect.options.length <= 1;
                            
                            if (wasEmpty && data.slots && data.slots.length > 0) {
                                // If it was empty before but now has slots, update
                                loadAvailableTimeSlots();
                            }
                        }
                    })
                    .catch(error => {
                        console.error('Error checking time slot availability:', error);
                    });
            }
        }, 30000); // Check every 30 seconds
        
        // Clean up interval when page is unloaded
        window.addEventListener('beforeunload', function() {
            clearInterval(refreshInterval);
        });
        
        // Form validation with real-time slot check
        const bookingForm = document.querySelector('form[action="/customer/book-service"]');
        if (bookingForm) {
            bookingForm.addEventListener('submit', function(e) {
                // Validate required fields
                const requiredFields = [
                    { id: 'issueDescription', name: 'Issue Description' },
                    { id: 'streetAddress', name: 'Street Address' },
                    { id: 'city', name: 'City' },
                    { id: 'state', name: 'State' },
                    { id: 'zipCode', name: 'ZIP Code' },
                    { id: 'fullName', name: 'Full Name' },
                    { id: 'phoneNumber', name: 'Phone Number' },
                    { id: 'email', name: 'Email Address' }
                ];

                // Check each required field
                for (let field of requiredFields) {
                    const element = document.getElementById(field.id);
                    if (!element.value.trim()) {
                        e.preventDefault();
                        alert(`Please fill in the ${field.name} field.`);
                        element.focus();
                        return false;
                    }
                }

                // Validate email format
                const emailField = document.getElementById('email');
                const emailPattern = /^[^\s@]+@[^\s@]+\.[^\s@]+$/;
                if (!emailPattern.test(emailField.value)) {
                    e.preventDefault();
                    alert('Please enter a valid email address.');
                    emailField.focus();
                    return false;
                }

                // Validate phone number (basic validation for Malaysian numbers)
                const phoneField = document.getElementById('phoneNumber');
                const phonePattern = /^[\+]?[\d\s\-\(\)]{8,}$/;
                if (!phonePattern.test(phoneField.value)) {
                    e.preventDefault();
                    alert('Please enter a valid phone number.');
                    phoneField.focus();
                    return false;
                }

                // Validate ZIP code (basic validation)
                const zipField = document.getElementById('zipCode');
                const zipPattern = /^\d{5}$/;
                if (!zipPattern.test(zipField.value)) {
                    e.preventDefault();
                    alert('Please enter a valid 5-digit ZIP code.');
                    zipField.focus();
                    return false;
                }

                const timeSlot = document.getElementById('timeSlot').value;
                const date = document.getElementById('preferredDate').value;
                const providerId = document.querySelector('input[name="providerId"]').value;
                
                if (!date) {
                    e.preventDefault();
                    alert('Please select a preferred date for the service.');
                    return false;
                }
                
                if (!timeSlot) {
                    e.preventDefault();
                    alert('Please select an available time slot.');
                    return false;
                }
                
                // Add validation for hourly bookings
                const feeType = document.querySelector('input[name="feeType"]').value;
                if (feeType === 'per hour') {
                    const hours = parseInt(document.getElementById('bookingHours').value);
                    if (!hours || hours < 1) {
                        e.preventDefault();
                        alert('Please specify how many hours you need for the service.');
                        return false;
                    }
                }
                
                // Get service type and booking hours for validation
                const serviceTypeInput = document.querySelector('input[name="serviceType"][type="hidden"]') || 
                                       document.getElementById('serviceType');
                const serviceType = serviceTypeInput?.value || 
                                 (serviceTypeInput?.options ? serviceTypeInput.options[serviceTypeInput.selectedIndex]?.value : '');
                
                let bookingHours = 1;
                const hourlyBookingSection = document.getElementById('hourlyBookingSection');
                if (serviceType === 'Home Cleaning' && feeType === 'per hour' && hourlyBookingSection && hourlyBookingSection.style.display !== 'none') {
                    bookingHours = parseInt(document.getElementById('bookingHours').value) || 1;
                }
                
                // Check if we have the latest slot data and if the selected slot is still valid
                if (window.lastFetchedSlots && window.lastFetchedSlots.slots) {
                    if (!window.lastFetchedSlots.slots.includes(timeSlot)) {
                        e.preventDefault();
                        alert('Sorry, this time slot is no longer available. It may have been booked by another customer. Please select a different time slot.');
                        
                        // Refresh the available time slots
                        loadAvailableTimeSlots();
                        return false;
                    }
                    
                    // If we have the latest data and the slot is valid, submit immediately
                    return true;
                }
                
                // If we don't have recent slot data, do a final check
                e.preventDefault(); // Temporarily prevent form submission
                
                // Show loading message
                const submitButton = this.querySelector('button[type="submit"]');
                const originalButtonText = submitButton.innerHTML;
                submitButton.disabled = true;
                submitButton.innerHTML = '<i class="bi bi-hourglass-split me-2"></i> Verifying availability...';
                
                // Double check slot availability with the same parameters used for loading
                fetch(`/api/available-slots?providerId=${providerId}&date=${date}&serviceType=${encodeURIComponent(serviceType)}&bookingHours=${bookingHours}`)
                    .then(response => response.json())
                    .then(data => {
                        if (data.slots && data.slots.includes(timeSlot)) {
                            // Slot is still available, submit the form
                            submitButton.innerHTML = '<i class="bi bi-check-circle me-2"></i> Booking...';
                            
                            // Store the validation data
                            window.lastFetchedSlots = data;
                            
                            // Submit the form
                            bookingForm.submit();
                        } else {
                            // Slot is no longer available
                            submitButton.disabled = false;
                            submitButton.innerHTML = originalButtonText;
                            
                            alert('Sorry, this time slot is no longer available. It may have been booked by another customer. Please select a different time slot.');
                            
                            // Refresh the available time slots
                            loadAvailableTimeSlots();
                        }
                    })
                    .catch(error => {
                        console.error('Error verifying time slot:', error);
                        submitButton.disabled = false;
                        submitButton.innerHTML = originalButtonText;
                        
                        // In case of error, allow form submission but warn the user
                        if (confirm('There was an error verifying the availability of this time slot. Do you want to proceed with booking anyway?')) {
                            bookingForm.submit();
                        }
                    });
            });
        }
    });

     // Ensure this runs after the main document loads
    window.addEventListener('DOMContentLoaded', function() {
        // Show special notice for Home Cleaning
        function updateHomeCleaningNotice() {
            const serviceTypeInput = document.querySelector('input[name="serviceType"][type="hidden"]') || 
                                   document.getElementById('serviceType');
            const serviceType = serviceTypeInput?.value || 
                             (serviceTypeInput?.options ? serviceTypeInput.options[serviceTypeInput.selectedIndex]?.value : '');
            
            const feeTypeInput = document.querySelector('input[name="feeType"][type="hidden"]');
            const feeType = feeTypeInput?.value;
            
            const homeCleaningNotice = document.getElementById('homeCleaningNotice');
            
            if (homeCleaningNotice) {
                if (serviceType === 'Home Cleaning' && feeType === 'per hour') {
                    homeCleaningNotice.style.display = 'block';
                } else {
                    homeCleaningNotice.style.display = 'none';
                }
            }
        }
        
        // Run once on page load
        updateHomeCleaningNotice();
        
        // Update whenever service type changes
        const serviceTypeSelect = document.getElementById('serviceType');
        if (serviceTypeSelect) {
            serviceTypeSelect.addEventListener('change', updateHomeCleaningNotice);
        }
    });
</script>
</body>
</html>