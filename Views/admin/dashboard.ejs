<!DOCTYPE html>
<html lang="en">
<head>
    <meta charset="UTF-8">
    <meta name="viewport" content="width=device-width, initial-scale=1.0">
    <title>HandyHub Admin Dashboard</title>
    <link href="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/css/bootstrap.min.css" rel="stylesheet">
    <link href="https://cdn.jsdelivr.net/npm/bootstrap-icons@1.11.3/font/bootstrap-icons.min.css" rel="stylesheet">
    <style>
        :root {
            --primary-blue: #0077be;
            --secondary-blue: #00a2e8;
            --dark-blue: #003366;
            --light-blue: #e6f2ff;
        }
 
        .sidebar {
            background-color: var(--dark-blue);
            min-height: 100vh;
            color: white;
        }

        .sidebar nav {
        flex-grow: 1;
        display: flex;
        flex-direction: column;
        }

        .nav-link.text-danger {
            border: none;
            background: none;
            width: 100%;
            text-align: left;
            margin-top: auto;
            color: #dc3545 !important; 
        }
    
        .nav-link.text-danger:hover {
            background-color: rgba(220, 53, 69, 0.1);
            color: #fff !important;
        }
 
        .sidebar .nav-link {
            color: white;
            padding: 15px 20px;
            transition: all 0.3s ease;
        }
 
        .sidebar .nav-link:hover {
            background-color: var(--secondary-blue);
            transform: translateX(10px);
        }
 
        .sidebar .nav-link.active {
            background-color: var(--primary-blue);
            border-left: 4px solid white;
        }
 
        .main-content {
            background-color: #f8f9fa;
        }
 
        .card {
            border: none;
            border-radius: 15px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
        }
 
        .card-stats {
            background: white;
            transition: transform 0.3s;
        }
 
        .card-stats:hover {
            transform: translateY(-5px);
            box-shadow: 0 10px 20px rgba(0,0,0,0.15);
        }
 
        .table-container {
            background: white;
            border-radius: 15px;
            padding: 25px;
            box-shadow: 0 0 20px rgba(0,0,0,0.1);
            margin-top: 30px;
        }
 
        .status-pending {
            background-color: #fff3cd;
            color: #856404;
            padding: 8px 15px;
            border-radius: 20px;
            font-size: 0.85rem;
            font-weight: 500;
        }
 
        .info-section {
            padding: 20px;
            margin-bottom: 20px;
            border-radius: 10px;
            background: var(--light-blue);
        }
 
        .service-tag {
            background: white;
            color: var(--dark-blue);
            padding: 8px 15px;
            border-radius: 20px;
            margin: 5px;
            display: inline-block;
            box-shadow: 0 2px 5px rgba(0,0,0,0.1);
        }
 
        .stats-icon {
            font-size: 2.5rem;
            color: var(--primary-blue);
            margin-bottom: 15px;
        }
 
        .table thead th {
            background-color: var(--light-blue);
            color: var(--dark-blue);
            padding: 15px;
            font-weight: 600;
        }
 
        .table tbody td {
            padding: 15px;
            vertical-align: middle;
        }
 
        .btn-primary {
            background-color: var(--primary-blue);
            border: none;
            padding: 8px 20px;
            transition: all 0.3s ease;
        }
 
        .btn-primary:hover {
            background-color: var(--dark-blue);
            transform: translateY(-2px);
        }
 
        .modal-content {
        border-radius: 16px;
        box-shadow: 0 10px 30px rgba(0,0,0,0.1);
    }

    .modal-header {
        background-color: #0077be;
        color: white;
        border-bottom: none;
        padding: 1.5rem;
        border-top-left-radius: 16px;
        border-top-right-radius: 16px;
    }

    .modal-body {
        padding: 2rem;
    }

    .info-section {
        background-color: #f8f9fa;
        border-left: 4px solid #0077be;
        margin-bottom: 1.5rem;
        padding: 1.5rem;
        border-radius: 8px;
    }

    .info-section h5 {
        color: #003366;
        margin-bottom: 1rem;
        font-weight: 600;
    }

    .service-tag {
        background-color: #e6f2ff;
        color: #003366;
        padding: 6px 12px;
        border-radius: 20px;
        margin: 5px;
        display: inline-block;
        font-size: 0.9rem;
        border: 1px solid #0077be;
    }

    .verification-buttons {
        display: flex;
        justify-content: center;
        gap: 1rem;
        margin-top: 1.5rem;
    }

    .verification-buttons .btn {
        padding: 0.8rem 2rem;
        font-weight: 500;
        border-radius: 25px;
        text-transform: uppercase;
        letter-spacing: 0.5px;
        transition: all 0.3s ease;
    }

    .verification-buttons .btn-approve {
        background-color: #28a745;
        color: white;
    }

    .verification-buttons .btn-approve:hover {
        background-color: #218838;
    }

    .verification-buttons .btn-reject {
        background-color: #dc3545;
        color: white;
    }

    .verification-buttons .btn-reject:hover {
        background-color: #c82333;
    }

    #documentPreview {
        margin-top: 1rem;
        border: 1px solid #dee2e6;
        border-radius: 4px;
        padding: 1rem;
        background-color: white;
    }

    #documentPreview img {
        max-width: 100%;
        height: auto;
    }

    /* Pricing table styles */
    .pricing-table {
        width: 100%;
        border-collapse: separate;
        border-spacing: 0;
        margin-top: 10px;
        border-radius: 8px;
        overflow: hidden;
        box-shadow: 0 2px 8px rgba(0,0,0,0.1);
    }
    
    .pricing-table th {
        background-color: var(--primary-blue);
        color: white;
        font-weight: 600;
        padding: 12px 15px;
        text-align: left;
    }
    
    .pricing-table td {
        padding: 12px 15px;
        border-bottom: 1px solid #dee2e6;
        background-color: white;
    }
    
    .pricing-table tr:last-child td {
        border-bottom: none;
    }
    
    .price-badge {
        background-color: var(--primary-blue);
        color: white;
        padding: 5px 10px;
        border-radius: 15px;
        font-weight: 500;
        font-size: 0.9rem;
    }

    .fee-type-badge {
        background-color: #e6f2ff;
        color: var(--dark-blue);
        padding: 4px 8px;
        border-radius: 12px;
        font-size: 0.8rem;
        border: 1px solid var(--primary-blue);
    }

    .btn-outline-danger.delete-btn {
        border-color: #dc3545;
        color: #dc3545;
        transition: all 0.3s ease;
        border-radius: 6px;
        font-weight: 500;
    }
    
    .btn-outline-danger.delete-btn:hover {
        background-color: #dc3545;
        color: white;
        box-shadow: 0 3px 8px rgba(220, 53, 69, 0.3);
        transform: translateY(-2px);
    }
    
    .btn-outline-primary {
        border-radius: 6px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    .btn-outline-primary:hover {
        box-shadow: 0 3px 8px rgba(0, 119, 190, 0.3);
        transform: translateY(-2px);
    }
    
    /* Animation for delete confirmation */
    @keyframes pulse {
        0% { transform: scale(1); }
        50% { transform: scale(1.05); }
        100% { transform: scale(1); }
    }
    
    .modal-danger .modal-content {
        animation: pulse 1s;
    }
    
    /* Updated modal styles */
    #deleteConfirmModal .modal-content {
        border: none;
        border-radius: 12px;
        overflow: hidden;
    }
    
    #deleteConfirmModal .modal-header {
        background-color: #dc3545;
        color: white;
        border-bottom: none;
        padding: 1.2rem 1.5rem;
    }
    
    #deleteConfirmModal .modal-footer {
        border-top: none;
        padding: 1.2rem 1.5rem;
    }
    
    #deleteConfirmModal .btn-danger {
        background-color: #dc3545;
        border: none;
        border-radius: 6px;
        padding: 10px 20px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    #deleteConfirmModal .btn-danger:hover {
        background-color: #c82333;
        box-shadow: 0 3px 8px rgba(220, 53, 69, 0.3);
        transform: translateY(-2px);
    }
    
    #deleteConfirmModal .btn-secondary {
        background-color: #6c757d;
        border: none;
        border-radius: 6px;
        padding: 10px 20px;
        font-weight: 500;
        transition: all 0.3s ease;
    }
    
    #deleteConfirmModal .btn-secondary:hover {
        background-color: #5a6268;
        box-shadow: 0 3px 8px rgba(108, 117, 125, 0.3);
        transform: translateY(-2px);
    }

        /* Add this to your existing styles in dashboard.ejs */
    html {
        scroll-behavior: smooth;
    }

    /* Optional: Add some padding for the section headings to account for the fixed header */
    #service-providers-section, 
    #customers-section {
        scroll-margin-top: 20px; /* Adjust this value to control how far from the top the scrolling stops */
    }

    /* This ensures that the anchor links work correctly with fixed sidebar */
    .main-content {
        scroll-padding-top: 20px;
    }
    
    /* Coverage table styles */
    #coverageTableBody td {
        padding: 10px 15px;
        border-bottom: 1px solid #dee2e6;
        background-color: white;
    }

    #coverageTableBody tr:last-child td {
        border-bottom: none;
    }

    #coverageTableBody td:first-child {
        background-color: #f8f9fa;
        font-weight: 500;
        color: var(--dark-blue);
    }

    /* Add a responsive design for the coverage table */
    @media (max-width: 767px) {
        #coverageTableBody td[rowspan] {
            display: table-cell;
            border-right: 1px solid #dee2e6;
        }
    }

    </style>

</head>
<body>
<div class="container-fluid">
    <div class="row">
        <!-- Sidebar -->
        <div class="col-md-2 px-0 sidebar">
            <div class="p-4">
                <h4>HandyHub Admin</h4>
            </div>
            <nav class="nav flex-column">
                <a class="nav-link active" href="/admin/dashboard">
                    <i class="bi bi-speedometer2"></i> Dashboard
                </a>
                <a class="nav-link" href="/admin/dashboard#service-providers-section">
                    <i class="bi bi-people"></i> Service Providers
                </a>
                <a class="nav-link" href="/admin/dashboard#customers-section">
                    <i class="bi bi-person"></i> Customers
                </a>
                <a class="nav-link" href="/admin/bookings">
                    <i class="bi bi-calendar"></i> Bookings
                </a>
                <a class="nav-link" href="/admin/earnings">
                    <i class="bi bi-cash"></i> Earnings
                </a>
                <!-- Add this at the bottom of the nav -->
                <div class="mt-auto">
                    <button onclick="logout()" class="nav-link text-danger">
                        <i class="bi bi-box-arrow-right"></i> Logout
                    </button>
                </div>
            </nav>
        </div>

        <!-- Main Content -->
        <div class="col-md-10 main-content p-4">
            <div class="row mb-4">
                <div class="col-md-3">
                    <div class="card card-stats">
                        <div class="card-body">
                            <h5 class="card-title text-muted">Total Service Providers</h5>
                            <h2 class="card-text"><%= totalProviders %></h2>
                        </div>
                    </div>
                </div>
                <div class="col-md-3">
                    <div class="card card-stats">
                        <div class="card-body">
                            <h5 class="card-title text-muted">Total Customers</h5>
                            <h2 class="card-text"><%= totalCustomers %></h2>
                        </div>
                    </div>
                </div>
            </div>

            <!-- Service Providers Table -->
            <div id="service-providers-section" class="card mt-4">
                <div class="card-body">
                    <h4 class="card-title">Service Providers</h4>
                    <div class="table-responsive">
                        <table class="table">
                            <thead>
                                <tr>
                                    <th>Name</th>
                                    <th>Email</th>
                                    <th>Service Category</th>
                                    <th>Status</th>
                                    <th>Actions</th>
                                </tr>
                            </thead>
                            <tbody>
                                <% providers.forEach(function(provider) { %>
                                    <tr data-provider-id="<%= provider.id %>">
                                        <td><%= provider.business_name %></td>
                                        <td><%= provider.email %></td>
                                        <td>
                                            <% if (provider.categories && provider.categories.length > 0) { %>
                                                <% provider.categories.forEach(function(category) { %>
                                                    <span class="badge bg-info me-1"><%= category %></span>
                                                <% }); %>
                                            <% } else { %>
                                                <span class="text-muted">No categories</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <% if (provider.is_verified === false) { %>
                                                <span class="badge bg-warning">Pending</span>
                                            <% } else { %>
                                                <span class="badge bg-success">Approved</span>
                                            <% } %>
                                        </td>
                                        <td>
                                            <div class="d-flex gap-2">
                                                <button class="btn btn-sm btn-outline-primary" onclick="showProviderDetails('<%= provider.id %>')">
                                                    <i class="bi bi-eye"></i> View
                                                </button>
                                                <button class="btn btn-sm btn-outline-danger delete-btn" onclick="deleteProvider('<%= provider.id %>', '<%= provider.business_name %>')">
                                                    <i class="bi bi-trash"></i> Delete
                                                </button>
                                            </div>
                                        </td>
                                    </tr>
                                <% }); %>
                            </tbody>
                        </table>
                    </div>
                </div>
            </div>

<!-- Add this modal at the bottom of dashboard.ejs -->
<div class="modal fade" id="providerDetailsModal">
    <div class="modal-dialog modal-dialog-centered modal-lg">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Provider Details</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <div class="info-section">
                    <h5>Business Information</h5>
                    <div class="row">
                        <div class="col-md-6">
                            <p><strong>Business Name:</strong><br><span id="businessName"></span></p>
                        </div>
                        <div class="col-md-6">
                            <p><strong>Email:</strong><br><span id="businessEmail"></span></p>
                        </div>
                        <div class="col-md-6 mt-3">
                            <p><strong>Phone:</strong><br><span id="businessPhone"></span></p>
                        </div>
                    </div>
                </div>

                <div class="info-section">
                    <h5>Service Categories</h5>
                    <div id="serviceCategories"></div>
                </div>

                <!-- Add this new section for pricing information -->
                <div class="info-section">
                    <h5>Pricing Information</h5>
                    <div id="pricingInfo">
                        <table class="pricing-table">
                            <thead>
                                <tr>
                                    <th>Service Category</th>
                                    <th>Base Fee</th>
                                    <th>Fee Type</th>
                                </tr>
                            </thead>
                            <tbody id="pricingTableBody">
                                <!-- Pricing data will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>
                
                <!-- Add this new section after the availability section in the providerDetailsModal -->
                <div class="info-section">
                    <h5>Service Coverage Areas</h5>
                    <div id="coverageLocations">
                        <table class="pricing-table">
                            <thead>
                                <tr>
                                    <th>State</th>
                                    <th>City</th>
                                </tr>
                            </thead>
                            <tbody id="coverageTableBody">
                                <!-- Coverage data will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <!-- Add this new section for availability information -->
                <div class="info-section">
                    <h5>Service Availability</h5>
                    <div id="availabilityInfo">
                        <table class="pricing-table">
                            <thead>
                                <tr>
                                    <th>Day</th>
                                    <th>Start Time</th>
                                    <th>End Time</th>
                                    <th>Slot Duration</th>
                                    <th>Status</th>
                                </tr>
                            </thead>
                            <tbody id="availabilityTableBody">
                                <!-- Availability data will be inserted here -->
                            </tbody>
                        </table>
                    </div>
                </div>

                <div class="info-section">
                    <h5>Services Offered</h5>
                    <div id="servicesOffered"></div>
                </div>

                <div class="info-section">
                    <h5>Business Documentation</h5>
                    <div id="documentPreview" class="text-center">
                        <!-- Preview will be inserted here -->
                    </div>
                </div>

                <div class="verification-buttons">
                    <button type="button" class="btn btn-approve" onclick="updateVerificationStatus('approve')">
                        Approve
                    </button>
                    <button type="button" class="btn btn-reject" onclick="updateVerificationStatus('reject')">
                        Reject
                    </button>
                </div>
            </div>
        </div>
    </div>
</div>

<!-- Add a confirmation modal for deletion -->
<div class="modal fade" id="deleteConfirmModal" tabindex="-1" aria-labelledby="deleteConfirmModalLabel" aria-hidden="true">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header bg-danger text-white">
                <h5 class="modal-title" id="deleteConfirmModalLabel">Confirm Deletion</h5>
                <button type="button" class="btn-close btn-close-white" data-bs-dismiss="modal" aria-label="Close"></button>
            </div>
            <div class="modal-body">
                <p>Are you sure you want to delete the service provider: <strong id="providerNameToDelete"></strong>?</p>
                <p class="text-danger">This action cannot be undone. All associated data including bookings and reviews will be permanently deleted.</p>
            </div>
            <div class="modal-footer">
                <button type="button" class="btn btn-secondary" data-bs-dismiss="modal">Cancel</button>
                <button type="button" class="btn btn-danger" id="confirmDeleteBtn">Delete</button>
            </div>
        </div>
    </div>
</div>

<!-- Customers Table -->
<div id="customers-section" class="card mt-4">
    <div class="card-body">
        <h4 class="card-title">Customers</h4>
        <div class="table-responsive">
            <table class="table">
                <thead>
                    <tr>
                        <th>Name</th>
                        <th>Email</th>
                        <th>Phone Number</th>
                        <th>Joined Date</th>
                        <th>Actions</th>
                    </tr>
                </thead>
                <tbody>
                    <% if (customers && customers.length > 0) { %>
                        <% customers.forEach(function(customer) { %>
                            <tr>
                                <td><%= customer.first_name %> <%= customer.last_name %></td>
                                <td><%= customer.email %></td>
                                <td><%= customer.phone_number %></td>
                                <td><%= new Date(customer.created_at).toLocaleDateString() %></td>
                                <td>
                                    <button class="btn btn-sm btn-primary" onclick="showCustomerDetails('<%= customer.id %>')">
                                        <i class="bi bi-eye"></i> View
                                    </button>
                                </td>
                            </tr>
                        <% }); %>
                    <% } else { %>
                        <tr>
                            <td colspan="5" class="text-center">No customers found</td>
                        </tr>
                    <% } %>
                </tbody>
            </table>
        </div>
    </div>
</div>

<!-- Customer Details Modal -->
<div class="modal fade" id="customerDetailsModal">
    <div class="modal-dialog">
        <div class="modal-content">
            <div class="modal-header">
                <h5 class="modal-title">Customer Details</h5>
                <button type="button" class="btn-close" data-bs-dismiss="modal"></button>
            </div>
            <div class="modal-body">
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Name:</strong><br><span id="customerName"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Email:</strong><br><span id="customerEmail"></span></p>
                    </div>
                </div>
                <div class="row">
                    <div class="col-md-6">
                        <p><strong>Phone:</strong><br><span id="customerPhone"></span></p>
                    </div>
                    <div class="col-md-6">
                        <p><strong>Joined:</strong><br><span id="customerJoinedDate"></span></p>
                    </div>
                </div>
            </div>
        </div>
    </div>
</div>


<script>
    let currentProviderId = null;

    function showProviderDetails(id) {
        currentProviderId = id;
        console.log('Current Provider ID set:', currentProviderId);
        
        fetch(`/admin/provider/${id}/details`)
            .then(response => {
                if (!response.ok) {
                    throw new Error(`HTTP error! status: ${response.status}`);
                }
                return response.json();
            })
            .then(provider => {
                // Debug log the full provider data
                console.log('Provider details received:', provider);
                
                // Set business information
                document.getElementById('businessName').textContent = provider.business_name || 'N/A';
                document.getElementById('businessEmail').textContent = provider.email || 'N/A';
                document.getElementById('businessPhone').textContent = provider.phone_number || 'N/A';
                
                // Handle categories display
                const categoriesElement = document.getElementById('serviceCategories');
                if (provider.categories && provider.categories.length > 0 && provider.categories[0] !== null) {
                    categoriesElement.innerHTML = provider.categories
                        .map(cat => `<span class="service-tag">${cat}</span>`)
                        .join('');
                } else {
                    categoriesElement.innerHTML = '<span class="text-muted">No categories</span>';
                }
                
                // Handle services display
                const servicesElement = document.getElementById('servicesOffered');
                if (provider.services && provider.services.length > 0 && provider.services[0] !== null) {
                    servicesElement.innerHTML = provider.services
                        .map(service => `<span class="service-tag">${service}</span>`)
                        .join('');
                } else {
                    servicesElement.innerHTML = '<span class="text-muted">No services offered</span>';
                }

                // Handle pricing display
                const pricingTableBody = document.getElementById('pricingTableBody');
                pricingTableBody.innerHTML = '';

                if (provider.pricing && provider.pricing.length > 0) {
                    provider.pricing.forEach(pricing => {
                        const row = document.createElement('tr');
                        
                        // Format the category name to be more readable
                        const formattedCategory = pricing.category
                            .replace(/_/g, ' ')
                            .replace(/\b\w/g, c => c.toUpperCase());

                        // Format the fee type to be more readable
                        const formattedFeeType = pricing.fee_type
                            .replace(/_/g, ' ')
                            .replace(/\b\w/g, c => c.toUpperCase());
                        
                        row.innerHTML = `
                            <td>${formattedCategory}</td>
                            <td>RM${pricing.base_fee.toFixed(2)}</td>
                            <td><span class="fee-type-badge">${formattedFeeType}</span></td>
                        `;
                        pricingTableBody.appendChild(row);
                    });
                } else {
                    pricingTableBody.innerHTML = `
                        <tr>
                            <td colspan="3" class="text-center">No pricing information available</td>
                        </tr>
                    `;
                }

                // Handle availability display
                const availabilityTableBody = document.getElementById('availabilityTableBody');
                availabilityTableBody.innerHTML = '';

                if (provider.availability && provider.availability.length > 0) {
                    console.log('Availability data found:', provider.availability);
                    
                    provider.availability.forEach(day => {
                        const row = document.createElement('tr');
                        
                        // Format slot duration to be more readable
                        let durationText = '';
                        if (day.slot_duration === 30) {
                            durationText = '30 minutes';
                        } else if (day.slot_duration === 60) {
                            durationText = '1 hour';
                        } else if (day.slot_duration === 90) {
                            durationText = '1.5 hours';
                        } else if (day.slot_duration === 120) {
                            durationText = '2 hours';
                        } else if (day.slot_duration === 180) {
                            durationText = '3 hours';
                        } else {
                            durationText = `${day.slot_duration} minutes`;
                        }
                        
                        // Format time strings to be more readable
                        function formatTime(timeStr) {
                            if (!timeStr) return 'N/A';
                            
                            // Handle different time formats
                            let hours, minutes;
                            if (timeStr.includes(':')) {
                                [hours, minutes] = timeStr.split(':');
                            } else {
                                hours = timeStr;
                                minutes = '00';
                            }
                            
                            hours = parseInt(hours);
                            const ampm = hours >= 12 ? 'PM' : 'AM';
                            hours = hours % 12 || 12; // Convert to 12-hour format
                            
                            return `${hours}:${minutes.padStart(2, '0')} ${ampm}`;
                        }
                        
                        row.innerHTML = `
                            <td>${day.day_of_week}</td>
                            <td>${day.is_available ? formatTime(day.start_time) : 'Not Available'}</td>
                            <td>${day.is_available ? formatTime(day.end_time) : 'Not Available'}</td>
                            <td>${day.is_available ? durationText : 'N/A'}</td>
                            <td>
                                ${day.is_available 
                                    ? '<span class="badge bg-success">Available</span>' 
                                    : '<span class="badge bg-secondary">Not Available</span>'}
                            </td>
                        `;
                        availabilityTableBody.appendChild(row);
                    });
                } else {
                    console.log('No availability data found');
                    availabilityTableBody.innerHTML = `
                        <tr>
                            <td colspan="5" class="text-center">No availability information available</td>
                        </tr>
                    `;
                }

                // Handle coverage locations
                const coverageTableBody = document.getElementById('coverageTableBody');
                    coverageTableBody.innerHTML = '';

                    if (provider.coverage_locations && provider.coverage_locations.length > 0) {
                        console.log('Coverage locations found:', provider.coverage_locations);
                        
                        // Group locations by state
                        const locationsByState = {};
                        provider.coverage_locations.forEach(location => {
                            if (!locationsByState[location.state_name]) {
                                locationsByState[location.state_name] = [];
                            }
                            locationsByState[location.state_name].push(location.city_name);
                        });
                        
                        // Sort states alphabetically
                        const sortedStates = Object.keys(locationsByState).sort();
                        
                        sortedStates.forEach(state => {
                            // Sort cities alphabetically within each state
                            const cities = locationsByState[state].sort();
                            
                            // Create a row for each city
                            cities.forEach((city, index) => {
                                const row = document.createElement('tr');
                                
                                // Only show state name in the first row for this state
                                if (index === 0) {
                                    row.innerHTML = `
                                        <td rowspan="${cities.length}">${state}</td>
                                        <td>${city}</td>
                                    `;
                                } else {
                                    row.innerHTML = `<td>${city}</td>`;
                                }
                                
                                coverageTableBody.appendChild(row);
                            });
                        });
                    } else {
                        console.log('No coverage locations found');
                        coverageTableBody.innerHTML = `
                            <tr>
                                <td colspan="2" class="text-center">No coverage areas available</td>
                            </tr>
                        `;
                    }

                // Handle document preview with extensive logging
                const documentPreview = document.getElementById('documentPreview');
                console.log('Full document path:', provider.certification_file);

                if (provider.certification_file) {
                    const fileExt = provider.certification_file.split('.').pop().toLowerCase();
                    
                    // Clear previous content
                    documentPreview.innerHTML = '';

                    if (fileExt === 'pdf') {
                        // For PDF files, use an embed element
                        const pdfEmbed = document.createElement('embed');
                        pdfEmbed.src = provider.certification_file;
                        pdfEmbed.type = 'application/pdf';
                        pdfEmbed.width = '100%';
                        pdfEmbed.height = '500px';
                        
                        documentPreview.appendChild(pdfEmbed);

                        pdfEmbed.addEventListener('error', () => {
                            console.error('PDF failed to load:', provider.certification_file);
                            documentPreview.innerHTML = `
                                <div class="alert alert-danger">
                                    Unable to load PDF. 
                                    Check file path: ${provider.certification_file}
                                </div>
                            `;
                        });
                    } else {
                        // For image files, use img element
                        const img = document.createElement('img');
                        img.src = provider.certification_file;
                        img.alt = 'Business Documentation';
                        img.style.maxWidth = '100%';
                        img.style.maxHeight = '500px';
                        img.style.objectFit = 'contain';

                        documentPreview.appendChild(img);

                        img.addEventListener('error', () => {
                            console.error('Image failed to load:', provider.certification_file);
                            documentPreview.innerHTML = `
                                <div class="alert alert-danger">
                                    Unable to load document. 
                                    Check file path: ${provider.certification_file}
                                </div>
                            `;
                        });
                    }
                } else {
                    documentPreview.innerHTML = '<p class="text-muted">No documentation provided</p>';
                }
                
                // Show the modal
                new bootstrap.Modal(document.getElementById('providerDetailsModal')).show();
            })
            .catch(error => {
                console.error('Error fetching provider details:', error);
                
                // Clear previous content
                document.getElementById('documentPreview').innerHTML = `
                    <div class="alert alert-danger">
                        Unable to load document. Error: ${error.message}
                    </div>
                `;
                
                // Still show the modal with error message
                new bootstrap.Modal(document.getElementById('providerDetailsModal')).show();
            });
    }

    function deleteProvider(id, businessName) {
         console.log(`Attempting to delete provider ID: ${id}, Name: ${businessName}`);
    
    // Set the provider ID and name for deletion
    currentProviderId = id;
    document.getElementById('providerNameToDelete').textContent = businessName;
    
    // Show the confirmation modal
    const deleteModal = new bootstrap.Modal(document.getElementById('deleteConfirmModal'));
    deleteModal.show();
    
    // Set up the confirm button
    document.getElementById('confirmDeleteBtn').onclick = function() {
        console.log('Delete confirmed, sending request...');
        
        // Show loading state
        const confirmBtn = document.getElementById('confirmDeleteBtn');
        const originalText = confirmBtn.textContent;
        confirmBtn.textContent = 'Deleting...';
        confirmBtn.disabled = true;
        
        // Send delete request to the server
        fetch(`/admin/provider/${id}/delete`, {
            method: 'DELETE',
            headers: {
                'Content-Type': 'application/json',
                'Accept': 'application/json'
            }
        })
        .then(response => {
            console.log('Response status:', response.status);
            console.log('Response headers:', response.headers);
            
            // Check if response is ok
            if (!response.ok) {
                throw new Error(`HTTP error! status: ${response.status}`);
            }
            
            // Check if response is JSON
            const contentType = response.headers.get('content-type');
            if (!contentType || !contentType.includes('application/json')) {
                throw new Error('Response is not JSON');
            }
            
            return response.json();
        })
        .then(result => {
            console.log('Delete result:', result);
            
            if (result.success) {
                // Remove the row from the table
                const providerRow = document.querySelector(`tr[data-provider-id="${id}"]`);
                if (providerRow) {
                    providerRow.remove();
                    console.log('Provider row removed from table');
                } else {
                    console.warn('Provider row not found in table');
                }
                
                // Hide the modal
                deleteModal.hide();
                
                // Show success message
                alert(result.message || 'Service provider deleted successfully');
                
                // Optionally refresh the page to update counts
                // window.location.reload();
                
            } else {
                throw new Error(result.error || 'Delete operation failed');
            }
        })
        .catch(error => {
            console.error('Error deleting provider:', error);
            
            // Show detailed error message
            let errorMessage = 'Error deleting service provider';
            if (error.message.includes('HTTP error')) {
                errorMessage += ': Server error occurred';
            } else if (error.message.includes('not JSON')) {
                errorMessage += ': Invalid server response';
            } else {
                errorMessage += `: ${error.message}`;
            }
            
            alert(errorMessage);
        })
        .finally(() => {
            // Reset button state
            confirmBtn.textContent = originalText;
            confirmBtn.disabled = false;
        });
    };
}

    function updateVerificationStatus(status) {
            if (!currentProviderId) return;

            const data = { status };
            if (status === 'reject') {
                const reason = prompt('Please provide a detailed reason for rejection:');
                if (!reason) return; // Cancel if no reason is provided
                data.rejectionReason = reason;
            }

            fetch(`/admin/provider/${currentProviderId}/verify`, {
                method: 'POST',
                headers: {
                    'Content-Type': 'application/json'
                },
                body: JSON.stringify(data)
            })
            .then(response => {
                // Log the raw response for debugging
                console.log('Response status:', response.status);
                return response.json();
            })
            .then(result => {
                if (result.success) {
                    // Find the row in the providers table
                    const providerRow = document.querySelector(`tr[data-provider-id="${currentProviderId}"]`);
                    
                    if (providerRow) {
                        // Update status badge
                        const statusCell = providerRow.querySelector('td:nth-child(4)');
                        if (statusCell) {
                            if (status === 'approve') {
                                statusCell.innerHTML = '<span class="badge bg-success">Approved</span>';
                            } else {
                                statusCell.innerHTML = '<span class="badge bg-danger">Rejected</span>';
                            }
                        }
                    }
                    
                    // Close the modal
                    const modal = bootstrap.Modal.getInstance(document.getElementById('providerDetailsModal'));
                    if (modal) modal.hide();

                    // Show success message
                    alert(result.message);
                } else {
                    throw new Error(result.error || 'Operation failed');
                }
            })
            .catch(error => {
                console.error('Error:', error);
                alert('Error updating verification status');
            });
    }

    function showCustomerDetails(id) {
        console.log('Fetching details for customer ID:', id);
        
        fetch(`/admin/customer/${id}/details`)
            .then(response => {
                console.log('Response status:', response.status);
                if (!response.ok) {
                    throw new Error('Network response was not ok');
                }
                return response.json();
            })
            .then(customer => {
                console.log('Customer details received:', customer);
                
                // Populate basic details
                document.getElementById('customerName').textContent = customer.name || 'N/A';
                document.getElementById('customerEmail').textContent = customer.email || 'N/A';
                document.getElementById('customerPhone').textContent = customer.phone_number || 'N/A';
                document.getElementById('customerJoinedDate').textContent = 
                    customer.joined_date ? new Date(customer.joined_date).toLocaleDateString() : 'N/A';
                
                // Show the modal
                new bootstrap.Modal(document.getElementById('customerDetailsModal')).show();
            })
            .catch(error => {
                console.error('Error fetching customer details:', error);
                alert(`Error loading customer details: ${error.message}`);
            });
    }

    function logout() {
        if (confirm('Are you sure you want to logout?')) {
            // Use browser's navigation to redirect to the logout route
            window.location.href = '/auth/logout';
        }
    }

    document.addEventListener('DOMContentLoaded', function() {
            // Enable tooltips
            const tooltipTriggerList = [].slice.call(document.querySelectorAll('[data-bs-toggle="tooltip"]'))
            tooltipTriggerList.map(function (tooltipTriggerEl) {
                return new bootstrap.Tooltip(tooltipTriggerEl)
            });
            
            // Add click handler for availability status buttons
            document.querySelectorAll('.availability-status').forEach(button => {
                button.addEventListener('click', function() {
                    const providerId = this.getAttribute('data-provider-id');
                    showProviderDetails(providerId);
                });
            });
        });

        // Add this script to the bottom of your dashboard.ejs file
    document.addEventListener('DOMContentLoaded', function() {
        // Set active navigation item based on hash
        function setActiveNavItem() {
            const hash = window.location.hash;
            const navItems = document.querySelectorAll('.sidebar .nav-link');
            
            // Remove active class from all nav items
            navItems.forEach(item => {
                item.classList.remove('active');
            });
            
            // Set active class based on hash
            if (hash === '#service-providers-section') {
                document.querySelector('.sidebar .nav-link[href="/admin/dashboard#service-providers-section"]').classList.add('active');
            } else if (hash === '#customers-section') {
                document.querySelector('.sidebar .nav-link[href="/admin/dashboard#customers-section"]').classList.add('active');
            } else if (!hash) {
                // If no hash, default to Dashboard being active
                document.querySelector('.sidebar .nav-link[href="/admin/dashboard"]').classList.add('active');
            }
        }
        
        // Initial check
        setActiveNavItem();
        
        // Listen for hash changes
        window.addEventListener('hashchange', setActiveNavItem);
        
        // Handle initial page load if there's a hash in the URL
        if (window.location.hash) {
            // Small delay to ensure the page has loaded
            setTimeout(function() {
                const targetElement = document.querySelector(window.location.hash);
                if (targetElement) {
                    targetElement.scrollIntoView();
                }
            }, 100);
        }
    });
</script>

<script src="https://cdn.jsdelivr.net/npm/bootstrap@5.3.2/dist/js/bootstrap.bundle.min.js"></script>
</body>
</html>